// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.mjs";
import * as Stdlib_Int from "../src/Stdlib_Int.mjs";
import * as Stdlib_Array from "../src/Stdlib_Array.mjs";
import * as Stdlib_Float from "../src/Stdlib_Float.mjs";

Jest.test("zero", (function (param) {
        return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.zero), 0);
      }));

Jest.test("one", (function (param) {
        return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.one), 1);
      }));

Jest.test("minimumValue", (function (param) {
        return Jest.Expect.toEqual(Jest.Expect.expect(Core__Int.Constants.minValue - 1 | 0), Core__Int.Constants.maxValue);
      }));

Jest.test("maximumValue", (function (param) {
        return Jest.Expect.toEqual(Jest.Expect.expect(Core__Int.Constants.maxValue + 1 | 0), Core__Int.Constants.minValue);
      }));

Jest.describe("add", (function (param) {
        Jest.test("add", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.add(3002, 4004)), 7006);
              }));
      }));

Jest.describe("subtract", (function (param) {
        Jest.test("subtract", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.subtract(4, 3)), 1);
              }));
      }));

Jest.describe("multiply", (function (param) {
        Jest.test("multiply", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.multiply(2, 7)), 14);
              }));
      }));

Jest.describe("divide", (function (param) {
        Jest.test("divide", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.divide(3, 2)), 1);
              }));
        Jest.test("division by zero", (function (param) {
                return Jest.Expect.toThrow(Jest.Expect.expect(function (param) {
                                return Stdlib_Int.divide(3, 0);
                              }));
              }));
        Jest.test("divide", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.divide(27, 5)), 5);
              }));
        Jest.test("divideFloat", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.divideFloat(3, 2)), 1.5);
              }));
        Jest.test("divideFloat", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.divideFloat(27, 5)), 5.4);
              }));
        Jest.test("divideFloat", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.divideFloat(8, 4)), 2.0);
              }));
        Jest.test("divideFloat by 0", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.divideFloat(8, 0) === Stdlib_Float.infinity), true);
              }));
        Jest.test("divideFloat 0", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.divideFloat(-8, 0) === Stdlib_Float.negativeInfinity), true);
              }));
      }));

Jest.describe("power", (function (param) {
        Jest.test("power", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.pow(7, 3)), 343);
              }));
        Jest.test("0 base", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.pow(0, 3)), 0);
              }));
        Jest.test("0 exponent", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.pow(7, 0)), 1);
              }));
      }));

Jest.describe("negate", (function (param) {
        Jest.test("positive number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.negate(8)), -8);
              }));
        Jest.test("negative number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.negate(-7)), 7);
              }));
        Jest.test("zero", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.negate(0)), 0);
              }));
      }));

Jest.describe("modulo", (function (param) {
        Jest.test("documentation examples", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Array.map([
                                    -4,
                                    -3,
                                    -2,
                                    -1,
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                  ], (function (a) {
                                      return Stdlib_Int.modulo(a, 3);
                                    }))), [
                            2,
                            0,
                            1,
                            2,
                            0,
                            1,
                            2,
                            0,
                            1
                          ]);
              }));
      }));

Jest.describe("remainder", (function (param) {
        Jest.test("documentation examples", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Array.map([
                                    -4,
                                    -2,
                                    -1,
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                  ], (function (a) {
                                      return Stdlib_Int.remainder(a, 3);
                                    }))), [
                            -1,
                            -2,
                            -1,
                            0,
                            1,
                            2,
                            0,
                            1
                          ]);
              }));
      }));

Jest.describe("absolute", (function (param) {
        Jest.test("positive number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.abs(8)), 8);
              }));
        Jest.test("negative number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.abs(-7)), 7);
              }));
        Jest.test("zero", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.abs(0)), 0);
              }));
      }));

Jest.describe("minimum", (function (param) {
        Jest.test("positive numbers", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.min(8, 18)), 8);
              }));
        Jest.test("with zero", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.min(5, 0)), 0);
              }));
        Jest.test("negative numbers", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.min(-4, -1)), -4);
              }));
      }));

Jest.describe("maximum", (function (param) {
        Jest.test("positive numbers", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.max(8, 18)), 18);
              }));
        Jest.test("with zero", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.max(5, 0)), 5);
              }));
        Jest.test("negative numbers", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Math.max(-4, -1)), -1);
              }));
      }));

Jest.describe("isEven", (function (param) {
        Jest.test("even number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.isEven(8)), true);
              }));
        Jest.test("odd number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.isEven(9)), false);
              }));
        Jest.test("zero even", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.isEven(0)), true);
              }));
      }));

Jest.describe("isOdd", (function (param) {
        Jest.test("even number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.isOdd(8)), false);
              }));
        Jest.test("odd number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.isOdd(9)), true);
              }));
        Jest.test("zero even", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.isOdd(0)), false);
              }));
      }));

Jest.describe("clamp", (function (param) {
        Jest.test("in range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Core__Int.clamp(0, 8, 5)), 5);
              }));
        Jest.test("above range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Core__Int.clamp(0, 8, 9)), 8);
              }));
        Jest.test("below range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Core__Int.clamp(2, 8, 1)), 2);
              }));
        Jest.test("above negative range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Core__Int.clamp(-10, -5, 5)), -5);
              }));
        Jest.test("below negative range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Core__Int.clamp(-10, -5, -15)), -10);
              }));
      }));

Jest.describe("inRange", (function (param) {
        Jest.test("in range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.inRange(3, 2, 4)), true);
              }));
        Jest.test("above range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.inRange(8, 2, 4)), false);
              }));
        Jest.test("below range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.inRange(1, 2, 4)), false);
              }));
        Jest.test("equal to ~upper", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.inRange(2, 1, 2)), false);
              }));
        Jest.test("negative range", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.inRange(-6, -7, -5)), true);
              }));
        Jest.test("invalid arguments", (function (param) {
                return Jest.Expect.toThrow(Jest.Expect.expect(function (param) {
                                return Stdlib_Int.inRange(3, 7, 1);
                              }));
              }));
      }));

Jest.describe("toFloat", (function (param) {
        Jest.test("5", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(5), 5);
              }));
        Jest.test("0", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(0), 0);
              }));
        Jest.test("-7", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(-7), -7);
              }));
      }));

Jest.describe("fromString", (function (param) {
        Jest.test("0", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "0")), 0);
              }));
        Jest.test("-0", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "-0")), 0);
              }));
        Jest.test("42", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "42")), 42);
              }));
        Jest.test("123456", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "123456")), 123456);
              }));
        Jest.test("-42", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "-42")), -42);
              }));
        Jest.test("0XFF", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "0XFF")), 255);
              }));
        Jest.test("0X000A", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "0X000A")), 10);
              }));
        Jest.test("Infinity", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "Infinity")), undefined);
              }));
        Jest.test("-Infinity", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "-Infinity")), undefined);
              }));
        Jest.test("NaN", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "NaN")), undefined);
              }));
        Jest.test("abc", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "abc")), undefined);
              }));
        Jest.test("--4", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, "--4")), undefined);
              }));
        Jest.test("empty string", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Int.fromString(undefined, " ")), undefined);
              }));
      }));

Jest.describe("toString", (function (param) {
        Jest.test("positive number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect((1).toString()), "1");
              }));
        Jest.test("negative number", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect((-1).toString()), "-1");
              }));
      }));

export {
  
}
/*  Not a pure module */
