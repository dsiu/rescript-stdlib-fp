// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Stdlib__Int from "../src/Stdlib__Int.mjs";
import * as Stdlib__List from "../src/Stdlib__List.mjs";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Stdlib__Array from "../src/Stdlib__Array.mjs";
import * as Stdlib__Float from "../src/Stdlib__Float.mjs";
import * as TableclothMap from "../src/Tablecloth/TableclothMap.mjs";
import * as Stdlib__Option from "../src/Stdlib__Option.mjs";
import * as Stdlib__Tuple2 from "../src/Stdlib__Tuple2.mjs";
import * as Stdlib__Tuple3 from "../src/Stdlib__Tuple3.mjs";

Jest.describe("singleton", () => {
  Jest.test("equals an array literal of the same value", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.singleton(1234)), [1234]));
  Jest.test("has length one", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.singleton(1).length), 1));
});

Jest.describe("length", () => {
  Jest.test("equals an array literal of the same value", () => Jest.Expect.toEqual(Jest.Expect.expect([].length), 0));
  Jest.test("has length one", () => Jest.Expect.toEqual(Jest.Expect.expect([/* 'a' */97].length), 1));
  Jest.test("has length two", () => Jest.Expect.toEqual(Jest.Expect.expect([
    "a",
    "b"
  ].length), 2));
});

Jest.describe("isEmpty", () => {
  Jest.test("returns true for empty array literals", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.isEmpty([])), true));
  Jest.test("returns false for literals a non-zero number of elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.isEmpty([1234])), false));
});

Jest.describe("initialize", () => {
  Jest.test("create empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.initialize(0, prim => prim)), []));
  Jest.test("negative length gives an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.initialize(-1, prim => prim)), []));
  Jest.test("create array initialize", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.initialize(3, prim => prim)), [
    0,
    1,
    2
  ]));
});

Jest.describe("repeat", () => {
  Jest.test("length zero creates an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.repeat(0, 0)), []));
  Jest.test("negative length gives an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.repeat(0, -1)), []));
  Jest.test("create array of ints", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.repeat(0, 3)), [
    0,
    0,
    0
  ]));
  Jest.test("create array strings", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.repeat("cat", 3)), [
    "cat",
    "cat",
    "cat"
  ]));
});

Jest.describe("range", () => {
  Jest.test("returns an array of the integers from zero and upto but not including [to]", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(undefined, 5)), [
    0,
    1,
    2,
    3,
    4
  ]));
  Jest.test("returns an empty array [to] is zero", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(undefined, 0)), []));
  Jest.test("takes an optional [from] argument to start create empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(2, 5)), [
    2,
    3,
    4
  ]));
  Jest.test("can start from negative values", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(-2, 3)), [
    -2,
    -1,
    0,
    1,
    2
  ]));
  Jest.test("returns an empty array [from] > [to_]", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(5, 0)), []));
});

Jest.describe("fromList", () => Jest.test("transforms a list into an array of the same elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.toArray({
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }
})), [
  1,
  2,
  3
])));

Jest.describe("toList", () => Jest.test("transform an array into a list of the same elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.fromArray([
  1,
  2,
  3
])), {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }
})));

Jest.describe("toIndexedList", () => {
  Jest.test("returns an empty list for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.toIndexedList([])), /* [] */0));
  Jest.test("transforms an array into a list of tuples", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.toIndexedList([
    "cat",
    "dog"
  ])), {
    hd: [
      0,
      "cat"
    ],
    tl: {
      hd: [
        1,
        "dog"
      ],
      tl: /* [] */0
    }
  }));
});

Jest.describe("clone", () => {
  Jest.test("returns an int array", () => {
    let numbers = [
      1,
      2,
      3
    ];
    let otherNumbers = Stdlib__Array.clone(numbers);
    numbers[1] = 9;
    return Jest.Expect.toEqual(Jest.Expect.expect(otherNumbers), [
      1,
      2,
      3
    ]);
  });
  Jest.test("returns an array of int arrays", () => {
    let numberGrid = [
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8,
        9
      ]
    ];
    let numberGridCopy = Stdlib__Array.clone(numberGrid);
    Stdlib__Option.flatMap(numberGrid[1], a => {
      a[1] = 0;
      return a;
    });
    Stdlib__Option.flatMap(numberGridCopy[1], a => {
      a[1] = 9;
      return a;
    });
    return Jest.Expect.toEqual(Jest.Expect.expect(numberGridCopy), [
      [
        1,
        2,
        3
      ],
      [
        4,
        9,
        6
      ],
      [
        7,
        8,
        9
      ]
    ]);
  });
});

Jest.describe("getUnsafe", () => {
  Jest.test("returns element for an in-bounds index", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.getUnsafe([
    "cat",
    "dog",
    "eel"
  ], 2)), "eel"));
  Jest.testAll("throws for an out of bounds index", {
    hd: -1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }
  }, index => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.getUnsafe([
    0,
    1,
    2
  ], index)), undefined));
  Jest.test("throws for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.getUnsafe([], 0)), undefined));
});

Jest.describe("get", () => {
  Jest.test("returns Some for an in-bounds index", () => Jest.Expect.toEqual(Jest.Expect.expect("eel"), "eel"));
  Jest.test("returns None for an out of bounds index", () => Jest.Expect.toEqual(Jest.Expect.expect([
      0,
      1,
      2
    ][5]), undefined));
  Jest.test("returns None for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect([][0]), undefined));
});

Jest.describe("setUnsafe", () => {
  Jest.test("can set a value at an index", () => {
    let numbers = [
      1,
      2,
      3
    ];
    Stdlib__Array.setUnsafe(numbers, 0, 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
      0,
      2,
      3
    ]);
  });
  Jest.testAll("throws for an out of bound index", {
    hd: -1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }
  }, index => {
    let numbers = [
      0,
      1,
      2
    ];
    return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.setUnsafe(numbers, index, 5)), undefined);
  });
});

Jest.describe("set", () => {
  Jest.test("can be partially applied to set an element", () => {
    let numbers = [
      1,
      2,
      3
    ];
    numbers[2] = 0;
    numbers[1] = 0;
    return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
      1,
      0,
      0
    ]);
  });
  Jest.test("can be partially applied to set an index", () => {
    let animals = [
      "ant",
      "bat",
      "cat"
    ];
    animals[0] = "antelope";
    return Jest.Expect.toEqual(Jest.Expect.expect(animals), [
      "antelope",
      "bat",
      "cat"
    ]);
  });
});

Jest.describe("first", () => {
  Jest.test("return first element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.first([
    1,
    2,
    3
  ])), 1));
  Jest.test("return none from empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.first([])), undefined));
});

Jest.describe("last", () => {
  Jest.test("return last element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.last([
    1,
    2,
    3
  ])), 3));
  Jest.test("return none from empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.last([])), undefined));
});

Jest.describe("sum", () => {
  Jest.test("equals zero for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sum([], {
    zero: Stdlib__Int.zero,
    add: Stdlib__Int.add
  })), 0));
  Jest.test("adds up the elements on an integer array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sum([
    1,
    2,
    3
  ], {
    zero: Stdlib__Int.zero,
    add: Stdlib__Int.add
  })), 6));
});

Jest.describe("filter", () => Jest.test("keep elements that [f] returns [true] for", () => Jest.Expect.toEqual(Jest.Expect.expect([
  1,
  2,
  3,
  4,
  5,
  6
].filter(Stdlib__Int.isEven)), [
  2,
  4,
  6
])));

Jest.describe("filterMap", () => Jest.test("keep elements that [f] returns [true] for", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.filterMap([
  3,
  4,
  5,
  6
], number => {
  if (Stdlib__Int.isEven(number)) {
    return Math.imul(number, number);
  }
  
})), [
  16,
  36
])));

Jest.describe("flatMap", () => Jest.test("{!map} [f] onto an array and {!flatten} the resulting arrays", () => Jest.Expect.toEqual(Jest.Expect.expect([
  1,
  2,
  3
].flatMap(n => [
  n,
  n
])), [
  1,
  1,
  2,
  2,
  3,
  3
])));

Jest.describe("swap", () => Jest.test("switches values at the given indicies", () => {
  let numbers = [
    1,
    2,
    3
  ];
  Stdlib__Array.swap(numbers, 1, 2);
  return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
    1,
    3,
    2
  ]);
}));

Jest.describe("map", () => Jest.test("Apply a function [f] to every element in an array", () => Jest.Expect.toEqual(Jest.Expect.expect([
  1.0,
  4.0,
  9.0
].map(prim => Math.sqrt(prim))), [
  1.0,
  2.0,
  3.0
])));

Jest.describe("mapWithIndex", () => Jest.test("equals an array literal of the same value", () => Jest.Expect.toEqual(Jest.Expect.expect([
  5,
  5,
  5
].map((prim0, prim1) => Math.imul(prim0, prim1))), [
  0,
  5,
  10
])));

Jest.describe("map2", () => {
  Jest.test("works the order of arguments to `f` is not important", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.map2([
    1,
    2,
    3
  ], [
    4,
    5,
    6
  ], (prim0, prim1) => prim0 + prim1 | 0)), [
    5,
    7,
    9
  ]));
  Jest.test("works the order of `f` is important", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.map2([
    "alice",
    "bob",
    "chuck"
  ], [
    2,
    5,
    7,
    8
  ], Stdlib__Tuple2.make)), [
    [
      "alice",
      2
    ],
    [
      "bob",
      5
    ],
    [
      "chuck",
      7
    ]
  ]));
});

Jest.describe("map3", () => Jest.test("maps elements of 3 arrays", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.map3([
  "alice",
  "bob",
  "chuck"
], [
  2,
  5,
  7,
  8
], [
  true,
  false,
  true,
  false
], Stdlib__Tuple3.make)), [
  [
    "alice",
    2,
    true
  ],
  [
    "bob",
    5,
    false
  ],
  [
    "chuck",
    7,
    true
  ]
])));

Jest.describe("partition", () => Jest.test("Split an array into a Tuple of arrays", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.partition([
  1,
  2,
  3,
  4,
  5,
  6
], Stdlib__Int.isOdd)), [
  [
    1,
    3,
    5
  ],
  [
    2,
    4,
    6
  ]
])));

Jest.describe("splitAt", () => {
  Jest.test("Divides an array into a Tuple of arrays", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitAt([
    1,
    2,
    3,
    4,
    5
  ], 2)), [
    [
      1,
      2
    ],
    [
      3,
      4,
      5
    ]
  ]));
  Jest.test("Split array at array[0]", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitAt([
    1,
    2,
    3,
    4,
    5
  ], 0)), [
    [],
    [
      1,
      2,
      3,
      4,
      5
    ]
  ]));
});

Jest.describe("splitWhen", () => {
  Jest.test("Divides an array at the first element f returns true for", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitWhen([
    5,
    7,
    8,
    6,
    4
  ], Stdlib__Int.isEven)), [
    [
      5,
      7
    ],
    [
      8,
      6,
      4
    ]
  ]));
  Jest.test("Divides an array at the first element f returns true for", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitWhen([
    5,
    7,
    8,
    7,
    4
  ], Stdlib__Int.isEven)), [
    [
      5,
      7
    ],
    [
      8,
      7,
      4
    ]
  ]));
  Jest.test("Divides an array at the first element f returns true for", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitWhen([
    "Ant",
    "Bat",
    "Cat"
  ], animal => animal.length > 3)), [
    [
      "Ant",
      "Bat",
      "Cat"
    ],
    []
  ]));
  Jest.test("Divides an array at the first element f returns true for", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitWhen([
    2,
    Math.PI,
    1.111
  ], Stdlib__Float.isInteger)), [
    [],
    [
      2,
      Math.PI,
      1.111
    ]
  ]));
});

Jest.describe("flatmap", () => Jest.test("flatMap", () => {
  let duplicate = n => [
    n,
    n
  ];
  return Jest.Expect.toEqual(Jest.Expect.expect([
    1,
    2,
    3
  ].flatMap(duplicate)), [
    1,
    1,
    2,
    2,
    3,
    3
  ]);
}));

Jest.describe("sliding", () => {
  Jest.test("size 1", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(undefined, [
    1,
    2,
    3,
    4,
    5
  ], 1)), [
    [1],
    [2],
    [3],
    [4],
    [5]
  ]));
  Jest.test("size 2", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(undefined, [
    1,
    2,
    3,
    4,
    5
  ], 2)), [
    [
      1,
      2
    ],
    [
      2,
      3
    ],
    [
      3,
      4
    ],
    [
      4,
      5
    ]
  ]));
  Jest.test("step 3 ", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(undefined, [
    1,
    2,
    3,
    4,
    5
  ], 3)), [
    [
      1,
      2,
      3
    ],
    [
      2,
      3,
      4
    ],
    [
      3,
      4,
      5
    ]
  ]));
  Jest.test("size 2, step 2", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(2, [
    1,
    2,
    3,
    4,
    5
  ], 2)), [
    [
      1,
      2
    ],
    [
      3,
      4
    ]
  ]));
  Jest.test("size 1, step 3", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(3, [
    1,
    2,
    3,
    4,
    5
  ], 1)), [
    [1],
    [4]
  ]));
  Jest.test("size 2, step 3", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(3, [
    1,
    2,
    3,
    4,
    5
  ], 2)), [
    [
      1,
      2
    ],
    [
      4,
      5
    ]
  ]));
  Jest.test("step 7", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(undefined, [
    1,
    2,
    3,
    4,
    5
  ], 7)), []));
});

Jest.describe("joinWith", () => {
  Jest.test("Convert an array of strings into a single String, placing [sep] comma between each string in the result", () => Jest.Expect.toEqual(Jest.Expect.expect([
    "Ant",
    "Bat",
    "Cat"
  ].join(", ")), "Ant, Bat, Cat"));
  Jest.test("Convert an empty array of strings into a String, returns an empty string", () => Jest.Expect.toEqual(Jest.Expect.expect([].join(", ")), ""));
});

Jest.describe("count", () => {
  Jest.test("returns the number of elements in array of odd and even numbers that isEven returns true for, returns int 2", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.count([
    1,
    3,
    4,
    8
  ], Stdlib__Int.isEven)), 2));
  Jest.test("returns the number of elements in array of odd numbers that isEven returns true for, returns int 0", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.count([
    1,
    3
  ], Stdlib__Int.isEven)), 0));
  Jest.test("returns the number of elements in an empty array that isEven returns true for, returns int 0", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.count([], Stdlib__Int.isEven)), 0));
});

Jest.describe("find", () => {
  Jest.test("returns the first element which `f` returns true for", () => Jest.Expect.toEqual(Jest.Expect.expect([
    1,
    3,
    4,
    8
  ].find(Stdlib__Int.isEven)), 4));
  Jest.test("returns `None` if `f` returns false for all elements ", () => Jest.Expect.toEqual(Jest.Expect.expect([
    0,
    2,
    4,
    8
  ].find(Stdlib__Int.isOdd)), undefined));
  Jest.test("returns `None` for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect([].find(Stdlib__Int.isEven)), undefined));
});

Jest.describe("findIndex", () => {
  Jest.test("returns the first (index,element) tuple which `f` returns true for", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.findIndex([
    1,
    3,
    4,
    8
  ], (index, number) => {
    if (index > 2) {
      return Stdlib__Int.isEven(number);
    } else {
      return false;
    }
  })), [
    3,
    8
  ]));
  Jest.test("returns `None` if `f` returns false for all elements ", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.findIndex([
    0,
    2,
    4,
    8
  ], (param, param$1) => false)), undefined));
  Jest.test("returns `None` for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.findIndex([], (index, number) => {
    if (index > 2) {
      return Stdlib__Int.isEven(number);
    } else {
      return false;
    }
  })), undefined));
});

Jest.describe("includes", () => {
  Jest.test("returns true if equal", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.includes([
    1,
    2,
    3
  ], 2, (prim0, prim1) => prim0 === prim1)), true));
  Jest.test("returns false if not equal", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.includes([
    1,
    5,
    3
  ], 2, (prim0, prim1) => prim0 === prim1)), false));
  Jest.test("returns false if empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.includes([], 2, (prim0, prim1) => prim0 === prim1)), false));
});

Jest.describe("minimum", () => {
  Jest.test("returns smallest element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.minimum([
    1,
    -2,
    3
  ], Primitive_int.compare)), -2));
  Jest.test("returns none is empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.minimum([], Primitive_int.compare)), undefined));
});

Jest.describe("maximum", () => {
  Jest.test("returns largest element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.maximum([
    1,
    -2,
    3
  ], Primitive_int.compare)), 3));
  Jest.test("returns none is empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.maximum([], Primitive_int.compare)), undefined));
});

Jest.describe("extent", () => {
  Jest.test("returns range", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.extent([
    1,
    -2,
    3
  ], Primitive_int.compare)), [
    -2,
    3
  ]));
  Jest.test("returns range on single", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.extent([1], Primitive_int.compare)), [
    1,
    1
  ]));
  Jest.test("returns none is empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.extent([], Primitive_int.compare)), undefined));
});

Jest.describe("any", () => {
  Jest.test("returns false for empty arrays", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.any([], Stdlib__Int.isEven)), false));
  Jest.test("returns true if at least one of the elements of an array return true for [f]", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.any([
    1,
    3,
    4,
    5,
    7
  ], Stdlib__Int.isEven)), true));
  Jest.test("returns false if all of the elements of an array return false for [f]", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.any([
    1,
    3,
    5,
    7
  ], Stdlib__Int.isEven)), false));
});

Jest.describe("all", () => {
  Jest.test("returns true for empty arrays", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.all([], Stdlib__Int.isEven)), true));
  Jest.test("returns true if [f] returns true for all elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.all([
    2,
    4
  ], Stdlib__Int.isEven)), true));
  Jest.test("returns false if a single element fails returns false for [f]", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.all([
    2,
    3
  ], Stdlib__Int.isEven)), false));
});

Jest.describe("append", () => Jest.test("append", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.append(Stdlib__Array.repeat(42, 2), Stdlib__Array.repeat(81, 3))), [
  42,
  42,
  81,
  81,
  81
])));

Jest.describe("flatten", () => Jest.test("flatten", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.flatten([
  [
    1,
    2
  ],
  [3],
  [
    4,
    5
  ]
])), [
  1,
  2,
  3,
  4,
  5
])));

Jest.describe("zip", () => {
  Jest.test("Combine two arrays by merging each pair of elements into a tuple", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.zip([
    1,
    2,
    3,
    4,
    5
  ], [
    "Dog",
    "Eagle",
    "Ferret"
  ])), [
    [
      1,
      "Dog"
    ],
    [
      2,
      "Eagle"
    ],
    [
      3,
      "Ferret"
    ]
  ]));
  Jest.test("Combine an empty array and another array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.zip([], [
    "Dog",
    "Eagle",
    "Ferret"
  ])), []));
});

Jest.describe("unzip", () => Jest.test("Decompose an array of tuples into a tuple of arrays", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.unzip([
  [
    0,
    true
  ],
  [
    17,
    false
  ],
  [
    1337,
    true
  ]
])), [
  [
    0,
    17,
    1337
  ],
  [
    true,
    false,
    true
  ]
])));

Jest.describe("values", () => {
  Jest.test("Return all of the [Some] values from an array of options", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.values([
    "Ant",
    undefined,
    "Cat"
  ])), [
    "Ant",
    "Cat"
  ]));
  Jest.test("Return all of the [Some] values from an empty array of options", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.values([])), []));
});

Jest.describe("compare", () => {
  Jest.test("Compare two arrays of unequal length using provided function Int.compare to compare pairs of elements and returns -1", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.compare([
    1,
    2,
    3
  ], [
    1,
    2,
    3,
    4
  ], Primitive_int.compare)), -1));
  Jest.test("Compare two identical arrays using provided function Int.compare to compare pairs of elements and returns 0", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.compare([
    1,
    2,
    3
  ], [
    1,
    2,
    3
  ], Primitive_int.compare)), 0));
  Jest.test("Compare two arrays with of the same length and differing elements using provided function Int.compare to compare pairs of elements and returns 1", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.compare([
    1,
    2,
    5
  ], [
    1,
    2,
    3
  ], Primitive_int.compare)), 1));
});

Jest.describe("intersperse", () => {
  Jest.test("equals an array literal of the same value", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.intersperse([
    "turtles",
    "turtles",
    "turtles"
  ], "on")), [
    "turtles",
    "on",
    "turtles",
    "on",
    "turtles"
  ]));
  Jest.test("equals an array literal of the same value", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.intersperse([], 0)), []));
});

Jest.describe("chunksOf", () => {
  Jest.test("Split an array into equally sized chunks", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.chunksOf([
    "#FFBA49",
    "#9984D4",
    "#20A39E",
    "#EF5B5B"
  ], 2)), [
    [
      "#FFBA49",
      "#9984D4"
    ],
    [
      "#20A39E",
      "#EF5B5B"
    ]
  ]));
  Jest.test("Split an array into equally sized chunks ignoring partial chunks", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.chunksOf([
    "#FFBA49",
    "#9984D4",
    "#20A39E",
    "#EF5B5B",
    "#23001E"
  ], 2)), [
    [
      "#FFBA49",
      "#9984D4"
    ],
    [
      "#20A39E",
      "#EF5B5B"
    ]
  ]));
  Jest.test("Split an empty array into equally sized chunks", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.chunksOf([], 2)), []));
});

Jest.describe("slice", () => {
  let numbers = [
    0,
    1,
    2,
    3,
    4
  ];
  let positiveArrayLengths_0 = numbers.length;
  let positiveArrayLengths_1 = {
    hd: numbers.length + 1 | 0,
    tl: {
      hd: 1000,
      tl: /* [] */0
    }
  };
  let positiveArrayLengths = {
    hd: positiveArrayLengths_0,
    tl: positiveArrayLengths_1
  };
  let negativeArrayLengths = Stdlib__List.map(positiveArrayLengths, Stdlib__Int.negate);
  Jest.test("a positive `from`", () => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(1)), [
    1,
    2,
    3,
    4
  ]));
  Jest.test("a negative `from`", () => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(-1)), [4]));
  Jest.testAll("`from` >= `length`", positiveArrayLengths, start => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(start)), []));
  Jest.testAll("`from` <= negative `length`", negativeArrayLengths, start => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(start)), numbers));
  Jest.test("a positive `to_`", () => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(0, 3)), [
    0,
    1,
    2
  ]));
  Jest.test("a negative `to_`", () => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(1, -1)), [
    1,
    2,
    3
  ]));
  Jest.testAll("`to_` >= length", positiveArrayLengths, end => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(0, end)), numbers));
  Jest.testAll("`to_` <= negative `length`", negativeArrayLengths, end => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(0, end)), []));
  Jest.test("both `from` and `to_` are negative and `from` < `to_`", () => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(-2, -1)), [3]));
  Jest.test("works `from` >= `to_`", () => Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(4, 3)), []));
});

Jest.describe("fold", () => {
  Jest.test("works for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.fold([], "", (prim0, prim1) => prim0 + prim1)), ""));
  Jest.test("works for an ascociative operator", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.fold(Stdlib__Array.repeat(7, 4), 1, (prim0, prim1) => Math.imul(prim0, prim1))), 2401));
  Jest.test("works the order of arguments to `f` is important", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.fold([
    "a",
    "b",
    "c"
  ], "", (prim0, prim1) => prim0 + prim1)), "abc"));
  Jest.test("works the order of arguments to `f` is important", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.fold([
    1,
    2,
    3
  ], /* [] */0, (list, element) => ({
    hd: element,
    tl: list
  }))), {
    hd: 3,
    tl: {
      hd: 2,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }
  }));
});

Jest.describe("foldRight", () => {
  Jest.test("works for empty arrays", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.foldRight([], "", (prim0, prim1) => prim0 + prim1)), ""));
  Jest.test("foldRight", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.foldRight(Stdlib__Array.repeat(5, 3), 0, (prim0, prim1) => prim0 + prim1 | 0)), 15));
  Jest.test("works the order of arguments to `f` is important", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.foldRight([
    "a",
    "b",
    "c"
  ], "", (prim0, prim1) => prim0 + prim1)), "cba"));
  Jest.test("works the order of arguments to `f` is important", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.foldRight([
    1,
    2,
    3
  ], /* [] */0, (list, element) => ({
    hd: element,
    tl: list
  }))), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }));
});

Jest.describe("reverse", () => Jest.test("alters an array in-place", () => {
  let numbers = [
    1,
    2,
    3
  ];
  numbers.reverse();
  return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
    3,
    2,
    1
  ]);
}));

Jest.describe("sort", () => {
  Jest.test("empty list", () => {
    let numbers = [];
    numbers.sort(Primitive_int.compare);
    return Jest.Expect.toEqual(Jest.Expect.expect(numbers), []);
  });
  Jest.test("one element", () => {
    let numbers = [5];
    numbers.sort(Primitive_int.compare);
    return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [5]);
  });
  Jest.test("multiple elements", () => {
    let numbers = [
      5,
      6,
      8,
      3,
      6
    ];
    numbers.sort(Primitive_int.compare);
    return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
      3,
      5,
      6,
      6,
      8
    ]);
  });
});

Jest.describe("groupBy", () => {
  Jest.test("returns an empty map for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(TableclothMap.length(Stdlib__Array.groupBy([], {
    comparator: Stdlib__Int.comparator
  }, prim => prim.length))), 0));
  Jest.test("example test case", () => {
    let animals = [
      "Ant",
      "Bear",
      "Cat",
      "Dewgong"
    ];
    return Jest.Expect.toEqual(Jest.Expect.expect(TableclothMap.toList(Stdlib__Array.groupBy(animals, {
      comparator: Stdlib__Int.comparator
    }, prim => prim.length))), {
      hd: [
        3,
        {
          hd: "Cat",
          tl: {
            hd: "Ant",
            tl: /* [] */0
          }
        }
      ],
      tl: {
        hd: [
          4,
          {
            hd: "Bear",
            tl: /* [] */0
          }
        ],
        tl: {
          hd: [
            7,
            {
              hd: "Dewgong",
              tl: /* [] */0
            }
          ],
          tl: /* [] */0
        }
      }
    });
  });
});

/*  Not a pure module */
