// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Core__List from "@rescript/core/src/Core__List.mjs";
import * as Stdlib__Int from "../src/Stdlib__Int.mjs";
import * as Stdlib__List from "../src/Stdlib__List.mjs";
import * as Stdlib__Array from "../src/Stdlib__Array.mjs";
import * as Stdlib__Float from "../src/Stdlib__Float.mjs";
import * as TableclothMap from "../src/Tablecloth/TableclothMap.mjs";
import * as Stdlib__Option from "../src/Stdlib__Option.mjs";
import * as Stdlib__Tuple2 from "../src/Stdlib__Tuple2.mjs";
import * as Stdlib__Tuple3 from "../src/Stdlib__Tuple3.mjs";

Jest.describe("singleton", (function () {
        Jest.test("equals an array literal of the same value", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.singleton(1234)), [1234]);
              }));
        Jest.test("has length one", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.singleton(1).length), 1);
              }));
      }));

Jest.describe("length", (function () {
        Jest.test("equals an array literal of the same value", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([].length), 0);
              }));
        Jest.test("has length one", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([/* 'a' */97].length), 1);
              }));
        Jest.test("has length two", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([
                                "a",
                                "b"
                              ].length), 2);
              }));
      }));

Jest.describe("isEmpty", (function () {
        Jest.test("returns true for empty array literals", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.isEmpty([])), true);
              }));
        Jest.test("returns false for literals a non-zero number of elements", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.isEmpty([1234])), false);
              }));
      }));

Jest.describe("initialize", (function () {
        Jest.test("create empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.initialize(0, (function (prim) {
                                      return prim;
                                    }))), []);
              }));
        Jest.test("negative length gives an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.initialize(-1, (function (prim) {
                                      return prim;
                                    }))), []);
              }));
        Jest.test("create array initialize", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.initialize(3, (function (prim) {
                                      return prim;
                                    }))), [
                            0,
                            1,
                            2
                          ]);
              }));
      }));

Jest.describe("repeat", (function () {
        Jest.test("length zero creates an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.repeat(0, 0)), []);
              }));
        Jest.test("negative length gives an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.repeat(0, -1)), []);
              }));
        Jest.test("create array of ints", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.repeat(0, 3)), [
                            0,
                            0,
                            0
                          ]);
              }));
        Jest.test("create array strings", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.repeat("cat", 3)), [
                            "cat",
                            "cat",
                            "cat"
                          ]);
              }));
      }));

Jest.describe("range", (function () {
        Jest.test("returns an array of the integers from zero and upto but not including [to]", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(undefined, 5)), [
                            0,
                            1,
                            2,
                            3,
                            4
                          ]);
              }));
        Jest.test("returns an empty array [to] is zero", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(undefined, 0)), []);
              }));
        Jest.test("takes an optional [from] argument to start create empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(2, 5)), [
                            2,
                            3,
                            4
                          ]);
              }));
        Jest.test("can start from negative values", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(-2, 3)), [
                            -2,
                            -1,
                            0,
                            1,
                            2
                          ]);
              }));
        Jest.test("returns an empty array [from] > [to_]", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.range(5, 0)), []);
              }));
      }));

Jest.describe("fromList", (function () {
        Jest.test("transforms a list into an array of the same elements", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Core__List.toArray({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })), [
                            1,
                            2,
                            3
                          ]);
              }));
      }));

Jest.describe("toList", (function () {
        Jest.test("transform an array into a list of the same elements", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Core__List.fromArray([
                                    1,
                                    2,
                                    3
                                  ])), {
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          });
              }));
      }));

Jest.describe("toIndexedList", (function () {
        Jest.test("returns an empty list for an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.toIndexedList([])), /* [] */0);
              }));
        Jest.test("transforms an array into a list of tuples", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.toIndexedList([
                                    "cat",
                                    "dog"
                                  ])), {
                            hd: [
                              0,
                              "cat"
                            ],
                            tl: {
                              hd: [
                                1,
                                "dog"
                              ],
                              tl: /* [] */0
                            }
                          });
              }));
      }));

Jest.describe("clone", (function () {
        Jest.test("returns an int array", (function () {
                var numbers = [
                  1,
                  2,
                  3
                ];
                var otherNumbers = Stdlib__Array.clone(numbers);
                numbers[1] = 9;
                return Jest.Expect.toEqual(Jest.Expect.expect(otherNumbers), [
                            1,
                            2,
                            3
                          ]);
              }));
        Jest.test("returns an array of int arrays", (function () {
                var numberGrid = [
                  [
                    1,
                    2,
                    3
                  ],
                  [
                    4,
                    5,
                    6
                  ],
                  [
                    7,
                    8,
                    9
                  ]
                ];
                var numberGridCopy = Stdlib__Array.clone(numberGrid);
                Stdlib__Option.flatMap(numberGrid[1], (function (a) {
                        a[1] = 0;
                        return a;
                      }));
                Stdlib__Option.flatMap(numberGridCopy[1], (function (a) {
                        a[1] = 9;
                        return a;
                      }));
                return Jest.Expect.toEqual(Jest.Expect.expect(numberGridCopy), [
                            [
                              1,
                              2,
                              3
                            ],
                            [
                              4,
                              9,
                              6
                            ],
                            [
                              7,
                              8,
                              9
                            ]
                          ]);
              }));
      }));

Jest.describe("getUnsafe", (function () {
        Jest.test("returns element for an in-bounds index", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.getUnsafe([
                                    "cat",
                                    "dog",
                                    "eel"
                                  ], 2)), "eel");
              }));
        Jest.testAll("throws for an out of bounds index", {
              hd: -1,
              tl: {
                hd: 3,
                tl: {
                  hd: 5,
                  tl: /* [] */0
                }
              }
            }, (function (index) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.getUnsafe([
                                    0,
                                    1,
                                    2
                                  ], index)), undefined);
              }));
        Jest.test("throws for an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.getUnsafe([], 0)), undefined);
              }));
      }));

Jest.describe("get", (function () {
        Jest.test("returns Some for an in-bounds index", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect("eel"), "eel");
              }));
        Jest.test("returns None for an out of bounds index", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([
                                  0,
                                  1,
                                  2
                                ][5]), undefined);
              }));
        Jest.test("returns None for an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([][0]), undefined);
              }));
      }));

Jest.describe("setUnsafe", (function () {
        Jest.test("can set a value at an index", (function () {
                var numbers = [
                  1,
                  2,
                  3
                ];
                Stdlib__Array.setUnsafe(numbers, 0, 0);
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
                            0,
                            2,
                            3
                          ]);
              }));
        Jest.testAll("throws for an out of bound index", {
              hd: -1,
              tl: {
                hd: 3,
                tl: {
                  hd: 5,
                  tl: /* [] */0
                }
              }
            }, (function (index) {
                var numbers = [
                  0,
                  1,
                  2
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.setUnsafe(numbers, index, 5)), undefined);
              }));
      }));

Jest.describe("set", (function () {
        Jest.test("can be partially applied to set an element", (function () {
                var numbers = [
                  1,
                  2,
                  3
                ];
                numbers[2] = 0;
                numbers[1] = 0;
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
                            1,
                            0,
                            0
                          ]);
              }));
        Jest.test("can be partially applied to set an index", (function () {
                var animals = [
                  "ant",
                  "bat",
                  "cat"
                ];
                animals[0] = "antelope";
                return Jest.Expect.toEqual(Jest.Expect.expect(animals), [
                            "antelope",
                            "bat",
                            "cat"
                          ]);
              }));
      }));

Jest.describe("first", (function () {
        Jest.test("return first element", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.first([
                                    1,
                                    2,
                                    3
                                  ])), 1);
              }));
        Jest.test("return none from empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.first([])), undefined);
              }));
      }));

Jest.describe("last", (function () {
        Jest.test("return last element", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.last([
                                    1,
                                    2,
                                    3
                                  ])), 3);
              }));
        Jest.test("return none from empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.last([])), undefined);
              }));
      }));

Jest.describe("sum", (function () {
        Jest.test("equals zero for an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sum([], {
                                    zero: Stdlib__Int.zero,
                                    add: Stdlib__Int.add
                                  })), 0);
              }));
        Jest.test("adds up the elements on an integer array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sum([
                                    1,
                                    2,
                                    3
                                  ], {
                                    zero: Stdlib__Int.zero,
                                    add: Stdlib__Int.add
                                  })), 6);
              }));
      }));

Jest.describe("filter", (function () {
        Jest.test("keep elements that [f] returns [true] for", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6
                                ].filter(Stdlib__Int.isEven)), [
                            2,
                            4,
                            6
                          ]);
              }));
      }));

Jest.describe("filterMap", (function () {
        Jest.test("keep elements that [f] returns [true] for", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.filterMap([
                                    3,
                                    4,
                                    5,
                                    6
                                  ], (function (number) {
                                      if (Stdlib__Int.isEven(number)) {
                                        return Math.imul(number, number);
                                      }
                                      
                                    }))), [
                            16,
                            36
                          ]);
              }));
      }));

Jest.describe("flatMap", (function () {
        Jest.test("{!map} [f] onto an array and {!flatten} the resulting arrays", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([
                                  1,
                                  2,
                                  3
                                ].flatMap(function (n) {
                                    return [
                                            n,
                                            n
                                          ];
                                  })), [
                            1,
                            1,
                            2,
                            2,
                            3,
                            3
                          ]);
              }));
      }));

Jest.describe("swap", (function () {
        Jest.test("switches values at the given indicies", (function () {
                var numbers = [
                  1,
                  2,
                  3
                ];
                Stdlib__Array.swap(numbers, 1, 2);
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
                            1,
                            3,
                            2
                          ]);
              }));
      }));

Jest.describe("map", (function () {
        Jest.test("Apply a function [f] to every element in an array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([
                                  1.0,
                                  4.0,
                                  9.0
                                ].map(function (prim) {
                                    return Math.sqrt(prim);
                                  })), [
                            1.0,
                            2.0,
                            3.0
                          ]);
              }));
      }));

Jest.describe("mapWithIndex", (function () {
        Jest.test("equals an array literal of the same value", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([
                                  5,
                                  5,
                                  5
                                ].map(function (prim0, prim1) {
                                    return Math.imul(prim0, prim1);
                                  })), [
                            0,
                            5,
                            10
                          ]);
              }));
      }));

Jest.describe("map2", (function () {
        Jest.test("works the order of arguments to `f` is not important", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.map2([
                                    1,
                                    2,
                                    3
                                  ], [
                                    4,
                                    5,
                                    6
                                  ], (function (prim0, prim1) {
                                      return prim0 + prim1 | 0;
                                    }))), [
                            5,
                            7,
                            9
                          ]);
              }));
        Jest.test("works the order of `f` is important", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.map2([
                                    "alice",
                                    "bob",
                                    "chuck"
                                  ], [
                                    2,
                                    5,
                                    7,
                                    8
                                  ], Stdlib__Tuple2.make)), [
                            [
                              "alice",
                              2
                            ],
                            [
                              "bob",
                              5
                            ],
                            [
                              "chuck",
                              7
                            ]
                          ]);
              }));
      }));

Jest.describe("map3", (function () {
        Jest.test("maps elements of 3 arrays", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.map3([
                                    "alice",
                                    "bob",
                                    "chuck"
                                  ], [
                                    2,
                                    5,
                                    7,
                                    8
                                  ], [
                                    true,
                                    false,
                                    true,
                                    false
                                  ], Stdlib__Tuple3.make)), [
                            [
                              "alice",
                              2,
                              true
                            ],
                            [
                              "bob",
                              5,
                              false
                            ],
                            [
                              "chuck",
                              7,
                              true
                            ]
                          ]);
              }));
      }));

Jest.describe("partition", (function () {
        Jest.test("Split an array into a Tuple of arrays", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.partition([
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6
                                  ], Stdlib__Int.isOdd)), [
                            [
                              1,
                              3,
                              5
                            ],
                            [
                              2,
                              4,
                              6
                            ]
                          ]);
              }));
      }));

Jest.describe("splitAt", (function () {
        Jest.test("Divides an array into a Tuple of arrays", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitAt([
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 2)), [
                            [
                              1,
                              2
                            ],
                            [
                              3,
                              4,
                              5
                            ]
                          ]);
              }));
        Jest.test("Split array at array[0]", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitAt([
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 0)), [
                            [],
                            [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          ]);
              }));
      }));

Jest.describe("splitWhen", (function () {
        Jest.test("Divides an array at the first element f returns true for", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitWhen([
                                    5,
                                    7,
                                    8,
                                    6,
                                    4
                                  ], Stdlib__Int.isEven)), [
                            [
                              5,
                              7
                            ],
                            [
                              8,
                              6,
                              4
                            ]
                          ]);
              }));
        Jest.test("Divides an array at the first element f returns true for", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitWhen([
                                    5,
                                    7,
                                    8,
                                    7,
                                    4
                                  ], Stdlib__Int.isEven)), [
                            [
                              5,
                              7
                            ],
                            [
                              8,
                              7,
                              4
                            ]
                          ]);
              }));
        Jest.test("Divides an array at the first element f returns true for", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitWhen([
                                    "Ant",
                                    "Bat",
                                    "Cat"
                                  ], (function (animal) {
                                      return animal.length > 3;
                                    }))), [
                            [
                              "Ant",
                              "Bat",
                              "Cat"
                            ],
                            []
                          ]);
              }));
        Jest.test("Divides an array at the first element f returns true for", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.splitWhen([
                                    2,
                                    Math.PI,
                                    1.111
                                  ], Stdlib__Float.isInteger)), [
                            [],
                            [
                              2,
                              Math.PI,
                              1.111
                            ]
                          ]);
              }));
      }));

Jest.describe("flatmap", (function () {
        Jest.test("flatMap", (function () {
                var duplicate = function (n) {
                  return [
                          n,
                          n
                        ];
                };
                return Jest.Expect.toEqual(Jest.Expect.expect([
                                  1,
                                  2,
                                  3
                                ].flatMap(duplicate)), [
                            1,
                            1,
                            2,
                            2,
                            3,
                            3
                          ]);
              }));
      }));

Jest.describe("sliding", (function () {
        Jest.test("size 1", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(undefined, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 1)), [
                            [1],
                            [2],
                            [3],
                            [4],
                            [5]
                          ]);
              }));
        Jest.test("size 2", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(undefined, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 2)), [
                            [
                              1,
                              2
                            ],
                            [
                              2,
                              3
                            ],
                            [
                              3,
                              4
                            ],
                            [
                              4,
                              5
                            ]
                          ]);
              }));
        Jest.test("step 3 ", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(undefined, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 3)), [
                            [
                              1,
                              2,
                              3
                            ],
                            [
                              2,
                              3,
                              4
                            ],
                            [
                              3,
                              4,
                              5
                            ]
                          ]);
              }));
        Jest.test("size 2, step 2", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(2, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 2)), [
                            [
                              1,
                              2
                            ],
                            [
                              3,
                              4
                            ]
                          ]);
              }));
        Jest.test("size 1, step 3", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(3, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 1)), [
                            [1],
                            [4]
                          ]);
              }));
        Jest.test("size 2, step 3", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(3, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 2)), [
                            [
                              1,
                              2
                            ],
                            [
                              4,
                              5
                            ]
                          ]);
              }));
        Jest.test("step 7", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.sliding(undefined, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], 7)), []);
              }));
      }));

Jest.describe("joinWith", (function () {
        Jest.test("Convert an array of strings into a single String, placing [sep] comma between each string in the result", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([
                                  "Ant",
                                  "Bat",
                                  "Cat"
                                ].join(", ")), "Ant, Bat, Cat");
              }));
        Jest.test("Convert an empty array of strings into a String, returns an empty string", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect([].join(", ")), "");
              }));
      }));

Jest.describe("count", (function () {
        Jest.test("returns the number of elements in array of odd and even numbers that isEven returns true for, returns int 2", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.count([
                                    1,
                                    3,
                                    4,
                                    8
                                  ], Stdlib__Int.isEven)), 2);
              }));
        Jest.test("returns the number of elements in array of odd numbers that isEven returns true for, returns int 0", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.count([
                                    1,
                                    3
                                  ], Stdlib__Int.isEven)), 0);
              }));
        Jest.test("returns the number of elements in an empty array that isEven returns true for, returns int 0", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.count([], Stdlib__Int.isEven)), 0);
              }));
      }));

Jest.describe("find", (function () {
        Jest.test("returns the first element which `f` returns true for", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.find([
                                    1,
                                    3,
                                    4,
                                    8
                                  ], Stdlib__Int.isEven)), 4);
              }));
        Jest.test("returns `None` if `f` returns false for all elements ", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.find([
                                    0,
                                    2,
                                    4,
                                    8
                                  ], Stdlib__Int.isOdd)), undefined);
              }));
        Jest.test("returns `None` for an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.find([], Stdlib__Int.isEven)), undefined);
              }));
      }));

Jest.describe("findIndex", (function () {
        Jest.test("returns the first (index,element) tuple which `f` returns true for", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.findIndex([
                                    1,
                                    3,
                                    4,
                                    8
                                  ], (function (index, number) {
                                      if (index > 2) {
                                        return Stdlib__Int.isEven(number);
                                      } else {
                                        return false;
                                      }
                                    }))), [
                            3,
                            8
                          ]);
              }));
        Jest.test("returns `None` if `f` returns false for all elements ", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.findIndex([
                                    0,
                                    2,
                                    4,
                                    8
                                  ], (function (param, param$1) {
                                      return false;
                                    }))), undefined);
              }));
        Jest.test("returns `None` for an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.findIndex([], (function (index, number) {
                                      if (index > 2) {
                                        return Stdlib__Int.isEven(number);
                                      } else {
                                        return false;
                                      }
                                    }))), undefined);
              }));
      }));

Jest.describe("includes", (function () {
        Jest.test("returns true if equal", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.includes([
                                    1,
                                    2,
                                    3
                                  ], 2, (function (prim0, prim1) {
                                      return prim0 === prim1;
                                    }))), true);
              }));
        Jest.test("returns false if not equal", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.includes([
                                    1,
                                    5,
                                    3
                                  ], 2, (function (prim0, prim1) {
                                      return prim0 === prim1;
                                    }))), false);
              }));
        Jest.test("returns false if empty", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.includes([], 2, (function (prim0, prim1) {
                                      return prim0 === prim1;
                                    }))), false);
              }));
      }));

Jest.describe("minimum", (function () {
        Jest.test("returns smallest element", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.minimum([
                                    1,
                                    -2,
                                    3
                                  ], Stdlib__Int.compare)), -2);
              }));
        Jest.test("returns none is empty", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.minimum([], Stdlib__Int.compare)), undefined);
              }));
      }));

Jest.describe("maximum", (function () {
        Jest.test("returns largest element", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.maximum([
                                    1,
                                    -2,
                                    3
                                  ], Stdlib__Int.compare)), 3);
              }));
        Jest.test("returns none is empty", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.maximum([], Stdlib__Int.compare)), undefined);
              }));
      }));

Jest.describe("extent", (function () {
        Jest.test("returns range", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.extent([
                                    1,
                                    -2,
                                    3
                                  ], Stdlib__Int.compare)), [
                            -2,
                            3
                          ]);
              }));
        Jest.test("returns range on single", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.extent([1], Stdlib__Int.compare)), [
                            1,
                            1
                          ]);
              }));
        Jest.test("returns none is empty", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.extent([], Stdlib__Int.compare)), undefined);
              }));
      }));

Jest.describe("any", (function () {
        Jest.test("returns false for empty arrays", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.any([], Stdlib__Int.isEven)), false);
              }));
        Jest.test("returns true if at least one of the elements of an array return true for [f]", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.any([
                                    1,
                                    3,
                                    4,
                                    5,
                                    7
                                  ], Stdlib__Int.isEven)), true);
              }));
        Jest.test("returns false if all of the elements of an array return false for [f]", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.any([
                                    1,
                                    3,
                                    5,
                                    7
                                  ], Stdlib__Int.isEven)), false);
              }));
      }));

Jest.describe("all", (function () {
        Jest.test("returns true for empty arrays", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.all([], Stdlib__Int.isEven)), true);
              }));
        Jest.test("returns true if [f] returns true for all elements", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.all([
                                    2,
                                    4
                                  ], Stdlib__Int.isEven)), true);
              }));
        Jest.test("returns false if a single element fails returns false for [f]", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.all([
                                    2,
                                    3
                                  ], Stdlib__Int.isEven)), false);
              }));
      }));

Jest.describe("append", (function () {
        Jest.test("append", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.append(Stdlib__Array.repeat(42, 2), Stdlib__Array.repeat(81, 3))), [
                            42,
                            42,
                            81,
                            81,
                            81
                          ]);
              }));
      }));

Jest.describe("flatten", (function () {
        Jest.test("flatten", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.flatten([
                                    [
                                      1,
                                      2
                                    ],
                                    [3],
                                    [
                                      4,
                                      5
                                    ]
                                  ])), [
                            1,
                            2,
                            3,
                            4,
                            5
                          ]);
              }));
      }));

Jest.describe("zip", (function () {
        Jest.test("Combine two arrays by merging each pair of elements into a tuple", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.zip([
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ], [
                                    "Dog",
                                    "Eagle",
                                    "Ferret"
                                  ])), [
                            [
                              1,
                              "Dog"
                            ],
                            [
                              2,
                              "Eagle"
                            ],
                            [
                              3,
                              "Ferret"
                            ]
                          ]);
              }));
        Jest.test("Combine an empty array and another array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.zip([], [
                                    "Dog",
                                    "Eagle",
                                    "Ferret"
                                  ])), []);
              }));
      }));

Jest.describe("unzip", (function () {
        Jest.test("Decompose an array of tuples into a tuple of arrays", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.unzip([
                                    [
                                      0,
                                      true
                                    ],
                                    [
                                      17,
                                      false
                                    ],
                                    [
                                      1337,
                                      true
                                    ]
                                  ])), [
                            [
                              0,
                              17,
                              1337
                            ],
                            [
                              true,
                              false,
                              true
                            ]
                          ]);
              }));
      }));

Jest.describe("values", (function () {
        Jest.test("Return all of the [Some] values from an array of options", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.values([
                                    "Ant",
                                    undefined,
                                    "Cat"
                                  ])), [
                            "Ant",
                            "Cat"
                          ]);
              }));
        Jest.test("Return all of the [Some] values from an empty array of options", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.values([])), []);
              }));
      }));

Jest.describe("compare", (function () {
        Jest.test("Compare two arrays of unequal length using provided function Int.compare to compare pairs of elements and returns -1", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.compare([
                                    1,
                                    2,
                                    3
                                  ], [
                                    1,
                                    2,
                                    3,
                                    4
                                  ], Stdlib__Int.compare)), -1);
              }));
        Jest.test("Compare two identical arrays using provided function Int.compare to compare pairs of elements and returns 0", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.compare([
                                    1,
                                    2,
                                    3
                                  ], [
                                    1,
                                    2,
                                    3
                                  ], Stdlib__Int.compare)), 0);
              }));
        Jest.test("Compare two arrays with of the same length and differing elements using provided function Int.compare to compare pairs of elements and returns 1", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.compare([
                                    1,
                                    2,
                                    5
                                  ], [
                                    1,
                                    2,
                                    3
                                  ], Stdlib__Int.compare)), 1);
              }));
      }));

Jest.describe("intersperse", (function () {
        Jest.test("equals an array literal of the same value", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.intersperse([
                                    "turtles",
                                    "turtles",
                                    "turtles"
                                  ], "on")), [
                            "turtles",
                            "on",
                            "turtles",
                            "on",
                            "turtles"
                          ]);
              }));
        Jest.test("equals an array literal of the same value", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.intersperse([], 0)), []);
              }));
      }));

Jest.describe("chunksOf", (function () {
        Jest.test("Split an array into equally sized chunks", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.chunksOf([
                                    "#FFBA49",
                                    "#9984D4",
                                    "#20A39E",
                                    "#EF5B5B"
                                  ], 2)), [
                            [
                              "#FFBA49",
                              "#9984D4"
                            ],
                            [
                              "#20A39E",
                              "#EF5B5B"
                            ]
                          ]);
              }));
        Jest.test("Split an array into equally sized chunks ignoring partial chunks", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.chunksOf([
                                    "#FFBA49",
                                    "#9984D4",
                                    "#20A39E",
                                    "#EF5B5B",
                                    "#23001E"
                                  ], 2)), [
                            [
                              "#FFBA49",
                              "#9984D4"
                            ],
                            [
                              "#20A39E",
                              "#EF5B5B"
                            ]
                          ]);
              }));
        Jest.test("Split an empty array into equally sized chunks", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.chunksOf([], 2)), []);
              }));
      }));

Jest.describe("slice", (function () {
        var numbers = [
          0,
          1,
          2,
          3,
          4
        ];
        var positiveArrayLengths_0 = numbers.length;
        var positiveArrayLengths_1 = {
          hd: numbers.length + 1 | 0,
          tl: {
            hd: 1000,
            tl: /* [] */0
          }
        };
        var positiveArrayLengths = {
          hd: positiveArrayLengths_0,
          tl: positiveArrayLengths_1
        };
        var negativeArrayLengths = Stdlib__List.map(positiveArrayLengths, Stdlib__Int.negate);
        Jest.test("a positive `from`", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(1)), [
                            1,
                            2,
                            3,
                            4
                          ]);
              }));
        Jest.test("a negative `from`", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(-1)), [4]);
              }));
        Jest.testAll("`from` >= `length`", positiveArrayLengths, (function (start) {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(start)), []);
              }));
        Jest.testAll("`from` <= negative `length`", negativeArrayLengths, (function (start) {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(start)), numbers);
              }));
        Jest.test("a positive `to_`", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(0, 3)), [
                            0,
                            1,
                            2
                          ]);
              }));
        Jest.test("a negative `to_`", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(1, -1)), [
                            1,
                            2,
                            3
                          ]);
              }));
        Jest.testAll("`to_` >= length", positiveArrayLengths, (function (end) {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(0, end)), numbers);
              }));
        Jest.testAll("`to_` <= negative `length`", negativeArrayLengths, (function (end) {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(0, end)), []);
              }));
        Jest.test("both `from` and `to_` are negative and `from` < `to_`", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(-2, -1)), [3]);
              }));
        Jest.test("works `from` >= `to_`", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers.slice(4, 3)), []);
              }));
      }));

Jest.describe("fold", (function () {
        Jest.test("works for an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.fold([], "", (function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }))), "");
              }));
        Jest.test("works for an ascociative operator", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.fold(Stdlib__Array.repeat(7, 4), 1, (function (prim0, prim1) {
                                      return Math.imul(prim0, prim1);
                                    }))), 2401);
              }));
        Jest.test("works the order of arguments to `f` is important", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.fold([
                                    "a",
                                    "b",
                                    "c"
                                  ], "", (function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }))), "abc");
              }));
        Jest.test("works the order of arguments to `f` is important", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.fold([
                                    1,
                                    2,
                                    3
                                  ], /* [] */0, (function (list, element) {
                                      return {
                                              hd: element,
                                              tl: list
                                            };
                                    }))), {
                            hd: 3,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 1,
                                tl: /* [] */0
                              }
                            }
                          });
              }));
      }));

Jest.describe("foldRight", (function () {
        Jest.test("works for empty arrays", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.foldRight([], "", (function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }))), "");
              }));
        Jest.test("foldRight", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.foldRight(Stdlib__Array.repeat(5, 3), 0, (function (prim0, prim1) {
                                      return prim0 + prim1 | 0;
                                    }))), 15);
              }));
        Jest.test("works the order of arguments to `f` is important", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.foldRight([
                                    "a",
                                    "b",
                                    "c"
                                  ], "", (function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }))), "cba");
              }));
        Jest.test("works the order of arguments to `f` is important", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Array.foldRight([
                                    1,
                                    2,
                                    3
                                  ], /* [] */0, (function (list, element) {
                                      return {
                                              hd: element,
                                              tl: list
                                            };
                                    }))), {
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          });
              }));
      }));

Jest.describe("reverse", (function () {
        Jest.test("alters an array in-place", (function () {
                var numbers = [
                  1,
                  2,
                  3
                ];
                numbers.reverse();
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
                            3,
                            2,
                            1
                          ]);
              }));
      }));

Jest.describe("sort", (function () {
        Jest.test("empty list", (function () {
                var numbers = [];
                numbers.sort(Stdlib__Int.compare);
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers), []);
              }));
        Jest.test("one element", (function () {
                var numbers = [5];
                numbers.sort(Stdlib__Int.compare);
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [5]);
              }));
        Jest.test("multiple elements", (function () {
                var numbers = [
                  5,
                  6,
                  8,
                  3,
                  6
                ];
                numbers.sort(Stdlib__Int.compare);
                return Jest.Expect.toEqual(Jest.Expect.expect(numbers), [
                            3,
                            5,
                            6,
                            6,
                            8
                          ]);
              }));
      }));

Jest.describe("groupBy", (function () {
        Jest.test("returns an empty map for an empty array", (function () {
                return Jest.Expect.toEqual(Jest.Expect.expect(TableclothMap.length(Stdlib__Array.groupBy([], {
                                        comparator: Stdlib__Int.comparator
                                      }, (function (prim) {
                                          return prim.length;
                                        })))), 0);
              }));
        Jest.test("example test case", (function () {
                var animals = [
                  "Ant",
                  "Bear",
                  "Cat",
                  "Dewgong"
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(TableclothMap.toList(Stdlib__Array.groupBy(animals, {
                                        comparator: Stdlib__Int.comparator
                                      }, (function (prim) {
                                          return prim.length;
                                        })))), {
                            hd: [
                              3,
                              {
                                hd: "Cat",
                                tl: {
                                  hd: "Ant",
                                  tl: /* [] */0
                                }
                              }
                            ],
                            tl: {
                              hd: [
                                4,
                                {
                                  hd: "Bear",
                                  tl: /* [] */0
                                }
                              ],
                              tl: {
                                hd: [
                                  7,
                                  {
                                    hd: "Dewgong",
                                    tl: /* [] */0
                                  }
                                ],
                                tl: /* [] */0
                              }
                            }
                          });
              }));
      }));

export {
  
}
/*  Not a pure module */
