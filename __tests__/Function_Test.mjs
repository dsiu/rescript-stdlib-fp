// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Stdlib__Int from "../src/Stdlib__Int.mjs";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Stdlib__Function from "../src/Stdlib__Function.mjs";

Jest.test("identity", () => Jest.Expect.toEqual(Jest.Expect.expect(1), 1));

Jest.test("ignore", () => Jest.Expect.toEqual(Jest.Expect.expect(), undefined));

Jest.test("constant", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.constant(1, 2)), 1));

Jest.test("sequence", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.sequence(1, 2)), 2));

Jest.test("flip", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.flip(Stdlib__Int.subtract, 2, 4)), 2));

Jest.test("negate", () => {
  let greaterThanFour = n => n > 4;
  return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.negate(greaterThanFour, 5)), false);
});

Jest.test("apply", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.apply(a => a + 1 | 0, 1)), 2));

function increment(x) {
  return x + 1 | 0;
}

function double(x) {
  return (x << 1);
}

Jest.test("compose", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.compose(increment, double, 1)), 4));

Jest.test("composeRight", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.composeRight(increment, double, 1)), 3));

Jest.test("tap", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.tap(Stdlib__Function.tap([
  1,
  3,
  2,
  5,
  4
].filter(Stdlib__Int.isEven), numbers => {
  numbers[1] = 0;
}), prim => {
  prim.reverse();
})), [
  0,
  2
]));

Jest.test("curry", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.curry(param => Primitive_int.div(param[0], param[1]), 8, 4)), 2));

Jest.test("uncurry", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.uncurry(Primitive_int.div, [
  8,
  4
])), 2));

Jest.test("curry3", () => {
  let tupleAdder = param => (param[0] + param[1] | 0) + param[2] | 0;
  return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.curry3(tupleAdder, 3, 4, 5)), 12);
});

Jest.test("uncurry3", () => {
  let curriedAdder = (a, b, c) => (a + b | 0) + c | 0;
  return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Function.uncurry3(curriedAdder, [
    3,
    4,
    5
  ])), 12);
});

export {
  increment,
  double,
}
/*  Not a pure module */
