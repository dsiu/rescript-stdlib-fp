// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Stdlib__Char from "../src/Stdlib__Char.mjs";
import * as Stdlib__Option from "../src/Stdlib__Option.mjs";

Jest.test("toCode", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toCode(/* 'a' */97)), 97));

Jest.describe("fromCode", () => {
  Jest.test("valid ASCII codes return the corresponding character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.fromCode(97)), /* 'a' */97));
  Jest.test("negative integers return None", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.fromCode(-1)), undefined));
  Jest.test("integers greater than 255 return None", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.fromCode(256)), undefined));
});

Jest.test("toString", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toString(/* 'a' */97)), "a"));

Jest.describe("fromString", () => {
  Jest.test("one-length string return Some", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.fromString("a")), /* 'a' */97));
  Jest.test("multi character strings return None", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.fromString("abc")), undefined));
  Jest.test("zero length strings return None", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.fromString("")), undefined));
});

Jest.describe("toLowercase", () => {
  Jest.test("converts uppercase ASCII characters to lowercase", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toLowercase(/* 'A' */65)), /* 'a' */97));
  Jest.test("perserves lowercase characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toLowercase(/* 'a' */97)), /* 'a' */97));
  Jest.test("perserves non-alphabet characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toLowercase(/* '7' */55)), /* '7' */55));
  Jest.test("perserves non-ASCII characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toLowercase(/* '\233' */233)), /* '\233' */233));
});

Jest.describe("toUppercase", () => {
  Jest.test("converts lowercase ASCII characters to uppercase", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toUppercase(/* 'a' */97)), /* 'A' */65));
  Jest.test("perserves uppercase characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toUppercase(/* 'A' */65)), /* 'A' */65));
  Jest.test("perserves non-alphabet characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toUppercase(/* '7' */55)), /* '7' */55));
  Jest.test("perserves non-ASCII characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toUppercase(/* '\233' */233)), /* '\233' */233));
});

Jest.describe("toDigit", () => {
  Jest.test("toDigit - converts ASCII characters representing digits into integers", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toDigit(/* '0' */48)), 0));
  Jest.test("toDigit - converts ASCII characters representing digits into integers", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toDigit(/* '8' */56)), 8));
  Jest.test("toDigit - converts ASCII characters representing digits into integers", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.toDigit(/* 'a' */97)), undefined));
});

Jest.describe("isLowercase", () => {
  Jest.test("returns true for any lowercase character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isLowercase(/* 'a' */97)), true));
  Jest.test("returns false for all other characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isLowercase(/* '7' */55)), false));
  Jest.test("returns false for non-ASCII characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isLowercase(/* '\236' */236)), false));
});

Jest.describe("isUppercase", () => {
  Jest.test("returns true for any uppercase character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isUppercase(/* 'A' */65)), true));
  Jest.test("returns false for all other characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isUppercase(/* '7' */55)), false));
  Jest.test("returns false for non-ASCII characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isLowercase(/* '\237' */237)), false));
});

Jest.describe("isLetter", () => {
  Jest.test("returns true for any ASCII alphabet character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isLetter(/* 'A' */65)), true));
  Jest.testAll("returns false for all other characters", {
    hd: /* '7' */55,
    tl: {
      hd: /* ' ' */32,
      tl: {
        hd: /* '\n' */10,
        tl: {
          hd: /* '\011' */11,
          tl: {
            hd: /* '\236' */236,
            tl: /* [] */0
          }
        }
      }
    }
  }, char => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isLetter(char)), false));
});

Jest.describe("isDigit", () => {
  Jest.testAll("returns true for digits 0-9", {
    hd: /* '0' */48,
    tl: {
      hd: /* '1' */49,
      tl: {
        hd: /* '2' */50,
        tl: {
          hd: /* '3' */51,
          tl: {
            hd: /* '4' */52,
            tl: {
              hd: /* '5' */53,
              tl: {
                hd: /* '6' */54,
                tl: {
                  hd: /* '7' */55,
                  tl: {
                    hd: /* '8' */56,
                    tl: {
                      hd: /* '9' */57,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, digit => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isDigit(digit)), true));
  Jest.test("returns false for all other characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isDigit(/* 'a' */97)), false));
});

Jest.describe("isAlphanumeric", () => {
  Jest.test("returns true for any alphabet or digit character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isAlphanumeric(/* 'A' */65)), true));
  Jest.test("returns false for all other characters", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isAlphanumeric(/* '?' */63)), false));
});

Jest.describe("isPrintable", () => {
  Jest.test("returns true for a printable character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isPrintable(/* '~' */126)), true));
  Jest.test("returns false for non-printable character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Option.map(Stdlib__Char.fromCode(31), Stdlib__Char.isPrintable)), false));
});

Jest.describe("isWhitespace", () => {
  Jest.test("returns true for any whitespace character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isWhitespace(/* ' ' */32)), true));
  Jest.test("returns false for a non-whitespace character", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__Char.isWhitespace(/* 'a' */97)), false));
});

/*  Not a pure module */
