// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Stdlib_Char from "../src/Stdlib_Char.mjs";
import * as Stdlib_Option from "../src/Stdlib_Option.mjs";

Jest.test("toCode", (function (param) {
        return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toCode(/* 'a' */97)), 97);
      }));

Jest.describe("fromCode", (function (param) {
        Jest.test("valid ASCII codes return the corresponding character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.fromCode(97)), /* 'a' */97);
              }));
        Jest.test("negative integers return None", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.fromCode(-1)), undefined);
              }));
        Jest.test("integers greater than 255 return None", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.fromCode(256)), undefined);
              }));
      }));

Jest.test("toString", (function (param) {
        return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toString(/* 'a' */97)), "a");
      }));

Jest.describe("fromString", (function (param) {
        Jest.test("one-length string return Some", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.fromString("a")), /* 'a' */97);
              }));
        Jest.test("multi character strings return None", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.fromString("abc")), undefined);
              }));
        Jest.test("zero length strings return None", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.fromString("")), undefined);
              }));
      }));

Jest.describe("toLowercase", (function (param) {
        Jest.test("converts uppercase ASCII characters to lowercase", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toLowercase(/* 'A' */65)), /* 'a' */97);
              }));
        Jest.test("perserves lowercase characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toLowercase(/* 'a' */97)), /* 'a' */97);
              }));
        Jest.test("perserves non-alphabet characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toLowercase(/* '7' */55)), /* '7' */55);
              }));
        Jest.test("perserves non-ASCII characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toLowercase(/* '\233' */233)), /* '\233' */233);
              }));
      }));

Jest.describe("toUppercase", (function (param) {
        Jest.test("converts lowercase ASCII characters to uppercase", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toUppercase(/* 'a' */97)), /* 'A' */65);
              }));
        Jest.test("perserves uppercase characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toUppercase(/* 'A' */65)), /* 'A' */65);
              }));
        Jest.test("perserves non-alphabet characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toUppercase(/* '7' */55)), /* '7' */55);
              }));
        Jest.test("perserves non-ASCII characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toUppercase(/* '\233' */233)), /* '\233' */233);
              }));
      }));

Jest.describe("toDigit", (function (param) {
        Jest.test("toDigit - converts ASCII characters representing digits into integers", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toDigit(/* '0' */48)), 0);
              }));
        Jest.test("toDigit - converts ASCII characters representing digits into integers", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toDigit(/* '8' */56)), 8);
              }));
        Jest.test("toDigit - converts ASCII characters representing digits into integers", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.toDigit(/* 'a' */97)), undefined);
              }));
      }));

Jest.describe("isLowercase", (function (param) {
        Jest.test("returns true for any lowercase character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isLowercase(/* 'a' */97)), true);
              }));
        Jest.test("returns false for all other characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isLowercase(/* '7' */55)), false);
              }));
        Jest.test("returns false for non-ASCII characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isLowercase(/* '\236' */236)), false);
              }));
      }));

Jest.describe("isUppercase", (function (param) {
        Jest.test("returns true for any uppercase character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isUppercase(/* 'A' */65)), true);
              }));
        Jest.test("returns false for all other characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isUppercase(/* '7' */55)), false);
              }));
        Jest.test("returns false for non-ASCII characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isLowercase(/* '\237' */237)), false);
              }));
      }));

Jest.describe("isLetter", (function (param) {
        Jest.test("returns true for any ASCII alphabet character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isLetter(/* 'A' */65)), true);
              }));
        Jest.testAll("returns false for all other characters", {
              hd: /* '7' */55,
              tl: {
                hd: /* ' ' */32,
                tl: {
                  hd: /* '\n' */10,
                  tl: {
                    hd: /* '\011' */11,
                    tl: {
                      hd: /* '\236' */236,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }, (function ($$char) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isLetter($$char)), false);
              }));
      }));

Jest.describe("isDigit", (function (param) {
        Jest.testAll("returns true for digits 0-9", {
              hd: /* '0' */48,
              tl: {
                hd: /* '1' */49,
                tl: {
                  hd: /* '2' */50,
                  tl: {
                    hd: /* '3' */51,
                    tl: {
                      hd: /* '4' */52,
                      tl: {
                        hd: /* '5' */53,
                        tl: {
                          hd: /* '6' */54,
                          tl: {
                            hd: /* '7' */55,
                            tl: {
                              hd: /* '8' */56,
                              tl: {
                                hd: /* '9' */57,
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }, (function (digit) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isDigit(digit)), true);
              }));
        Jest.test("returns false for all other characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isDigit(/* 'a' */97)), false);
              }));
      }));

Jest.describe("isAlphanumeric", (function (param) {
        Jest.test("returns true for any alphabet or digit character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isAlphanumeric(/* 'A' */65)), true);
              }));
        Jest.test("returns false for all other characters", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isAlphanumeric(/* '?' */63)), false);
              }));
      }));

Jest.describe("isPrintable", (function (param) {
        Jest.test("returns true for a printable character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isPrintable(/* '~' */126)), true);
              }));
        Jest.test("returns false for non-printable character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Option.map(Stdlib_Char.fromCode(31), Stdlib_Char.isPrintable)), false);
              }));
      }));

Jest.describe("isWhitespace", (function (param) {
        Jest.test("returns true for any whitespace character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isWhitespace(/* ' ' */32)), true);
              }));
        Jest.test("returns false for a non-whitespace character", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Char.isWhitespace(/* 'a' */97)), false);
              }));
      }));

export {
  
}
/*  Not a pure module */
