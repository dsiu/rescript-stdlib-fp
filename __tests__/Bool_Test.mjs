// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.mjs";
import * as Stdlib_Bool from "../src/Stdlib_Bool.mjs";

Jest.describe("fromInt", (function (param) {
        Jest.test("converts zero to Some(false)", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.fromInt(0)), false);
              }));
        Jest.test("converts one to Some(true)", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.fromInt(1)), true);
              }));
        Jest.testAll("converts everything else to None", {
              hd: Core__Int.Constants.minValue,
              tl: {
                hd: -2,
                tl: {
                  hd: -1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: Core__Int.Constants.maxValue,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }, (function ($$int) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.fromInt($$int)), undefined);
              }));
      }));

Jest.describe("fromString", (function (param) {
        Jest.test("converts string to Some(true)", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.fromString("true")), true);
              }));
        Jest.test("converts string to Some(false)", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.fromString("false")), false);
              }));
        Jest.test("capital True returns None", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.fromString("True")), undefined);
              }));
        Jest.test("non-string returns None", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.fromString("1")), undefined);
              }));
      }));

Jest.describe("xor", (function (param) {
        Jest.test("Returns [true] for xor of args true true", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.xor(true, true)), false);
              }));
        Jest.test("Returns [true] for xor of args true false]", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.xor(true, false)), true);
              }));
        Jest.test("Returns [true] for xor of args false true", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.xor(false, true)), true);
              }));
        Jest.test("Returns [false] for xor of args false false", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.xor(false, false)), false);
              }));
      }));

Jest.describe("not", (function (param) {
        Jest.test("Returns negation of true, returns false", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.not(true)), false);
              }));
        Jest.test("Returns negation of false, returns true", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.not(false)), true);
              }));
      }));

Jest.describe("toString", (function (param) {
        Jest.test("Returns string of bool, returns true as string", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.toString(true)), "true");
              }));
        Jest.test("Returns string of bool, returns false as string", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.toString(false)), "false");
              }));
      }));

Jest.describe("toInt", (function (param) {
        Jest.test("Returns 1 for arg true", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.toInt(true)), 1);
              }));
        Jest.test("Returns 0 for arg false", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.toInt(false)), 0);
              }));
      }));

Jest.describe("equal", (function (param) {
        Jest.test("Returns true for equal args true true", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.equal(true, true)), true);
              }));
        Jest.test("Returns true equal for args false false", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.equal(false, false)), true);
              }));
        Jest.test("Returns false for inqueal args true false", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.equal(true, false)), false);
              }));
      }));

Jest.describe("compare", (function (param) {
        Jest.test("Returns int 0 to describe comparison of args true true", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.compare(true, true)), 0);
              }));
        Jest.test("Returns int 1 to describe comparison of args true false", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.compare(true, false)), 1);
              }));
        Jest.test("Returns int -1 to describe comparison of args false true", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.compare(false, true)), -1);
              }));
        Jest.test("Returns int 0 to describe comparison of args false false", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib_Bool.compare(false, false)), 0);
              }));
      }));

export {
  
}
/*  Not a pure module */
