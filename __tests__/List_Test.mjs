// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Stdlib__Int from "../src/Stdlib__Int.mjs";
import * as Stdlib__Char from "../src/Stdlib__Char.mjs";
import * as Stdlib__List from "../src/Stdlib__List.mjs";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as TableclothMap from "../src/Tablecloth/TableclothMap.mjs";
import * as Stdlib__String from "../src/Stdlib__String.mjs";

Jest.describe("empty", () => Jest.test("returns int 0 for empty list arg", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.length(Stdlib__List.empty)), 0)));

Jest.describe("singleton", () => {
  Jest.test("returns array singleton of empty string from arg empty string", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.singleton("")), {
    hd: "",
    tl: /* [] */0
  }));
  Jest.test("returns array singleton of int arg", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.singleton(1234)), {
    hd: 1234,
    tl: /* [] */0
  }));
  Jest.test("returns array singleton of string arg", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.singleton("hello")), {
    hd: "hello",
    tl: /* [] */0
  }));
});

Jest.describe("repeat", () => {
  Jest.test("returns empty list from repeat arg 0", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.repeat(7, 0)), /* [] */0));
  Jest.test("returns empty list from negative repeat arg -10", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.repeat(7, -10)), /* [] */0));
  Jest.test("returns list of char 'a' repeated 5 times", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.repeat(/* 'a' */97, 5)), {
    hd: /* 'a' */97,
    tl: {
      hd: /* 'a' */97,
      tl: {
        hd: /* 'a' */97,
        tl: {
          hd: /* 'a' */97,
          tl: {
            hd: /* 'a' */97,
            tl: /* [] */0
          }
        }
      }
    }
  }));
});

Jest.describe("range", () => {
  Jest.test("returns empty when is zero", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.range(undefined, 0)), /* [] */0));
  Jest.test("with single", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.range(undefined, 5)), {
    hd: 0,
    tl: {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("with to and from", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.range(2, 5)), {
    hd: 2,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("with negative", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.range(-2, 2)), {
    hd: -2,
    tl: {
      hd: -1,
      tl: {
        hd: 0,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      }
    }
  }));
  Jest.test("returns empty with count down", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.range(5, 2)), /* [] */0));
});

Jest.describe("initalize", () => {
  Jest.test("with identity", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.initialize(4, index => index)), {
    hd: 0,
    tl: {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }
  }));
  Jest.test("with math", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.initialize(4, index => Math.imul(index, index))), {
    hd: 0,
    tl: {
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 9,
          tl: /* [] */0
        }
      }
    }
  }));
});

Jest.describe("fromArray", () => {
  Jest.test("from empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.fromArray([])), /* [] */0));
  Jest.test("from string", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.fromArray([
    /* 'h' */104,
    /* 'e' */101,
    /* 'l' */108,
    /* 'l' */108,
    /* 'o' */111
  ])), {
    hd: /* 'h' */104,
    tl: {
      hd: /* 'e' */101,
      tl: {
        hd: /* 'l' */108,
        tl: {
          hd: /* 'l' */108,
          tl: {
            hd: /* 'o' */111,
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("with int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.fromArray([
    -1,
    3,
    2,
    7
  ])), {
    hd: -1,
    tl: {
      hd: 3,
      tl: {
        hd: 2,
        tl: {
          hd: 7,
          tl: /* [] */0
        }
      }
    }
  }));
});

Jest.describe("head", () => {
  Jest.test("from empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.head(/* [] */0)), undefined));
  Jest.test("with int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.head({
    hd: -3,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    }
  })), -3));
});

Jest.describe("cons", () => {
  Jest.test("from empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.cons(/* [] */0, 1)), {
    hd: 1,
    tl: /* [] */0
  }));
  Jest.test("with int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.cons({
    hd: 2,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    }
  }, 1)), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }
  }));
});

Jest.describe("filterMap", () => Jest.test("keeps elements which return Some", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.filterMap({
  hd: -1,
  tl: {
    hd: 80,
    tl: {
      hd: 99,
      tl: /* [] */0
    }
  }
}, Stdlib__Char.fromCode)), {
  hd: /* 'P' */80,
  tl: {
    hd: /* 'c' */99,
    tl: /* [] */0
  }
})));

Jest.describe("filterWithIndex", () => {
  Jest.test("returns elements if index is greater than 1", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.filterWithIndex({
    hd: 2,
    tl: {
      hd: 99,
      tl: {
        hd: 0,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }
  }, (param, i) => i > 1)), {
    hd: 0,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.filterWithIndex(/* [] */0, (i, param) => i > 1)), /* [] */0));
});

Jest.describe("drop", () => {
  Jest.test("from an empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.drop(/* [] */0, 1)), undefined));
  Jest.test("zero elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.drop({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 0)), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("the first element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.drop({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 1)), {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
  Jest.test("all elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.drop({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 3)), /* [] */0));
  Jest.test("greater than the number of elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.drop({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 4)), undefined));
  Jest.test("negative count", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.drop({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, -1)), undefined));
  Jest.test("zero count", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.drop({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 0)), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }));
});

Jest.describe("filter", () => {
  Jest.test("normal", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.filter({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: {
          hd: 7,
          tl: {
            hd: 8,
            tl: {
              hd: 9,
              tl: /* [] */0
            }
          }
        }
      }
    }
  }, Stdlib__Int.isEven)), {
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: {
          hd: 8,
          tl: /* [] */0
        }
      }
    }
  }));
  Jest.test("filter none", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.filter({
    hd: 5,
    tl: {
      hd: 7,
      tl: {
        hd: 9,
        tl: /* [] */0
      }
    }
  }, Stdlib__Int.isEven)), /* [] */0));
  Jest.test("filter all", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.filter({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    }
  }, Stdlib__Int.isEven)), {
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    }
  }));
});

Jest.describe("dropWhile", () => {
  Jest.test("drops item from list if isEven, returns list of only odd items", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.dropWhile({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: {
          hd: 7,
          tl: {
            hd: 8,
            tl: {
              hd: 9,
              tl: /* [] */0
            }
          }
        }
      }
    }
  }, Stdlib__Int.isEven)), {
    hd: 7,
    tl: {
      hd: 8,
      tl: {
        hd: 9,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("drops none despite items dispersed throughout list because first item returns false for isEven, returns list without changes", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.dropWhile({
    hd: 3,
    tl: {
      hd: 4,
      tl: {
        hd: 7,
        tl: {
          hd: 8,
          tl: {
            hd: 9,
            tl: /* [] */0
          }
        }
      }
    }
  }, Stdlib__Int.isEven)), {
    hd: 3,
    tl: {
      hd: 4,
      tl: {
        hd: 7,
        tl: {
          hd: 8,
          tl: {
            hd: 9,
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("drops all because all items are even, returns empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.dropWhile({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: {
          hd: 8,
          tl: /* [] */0
        }
      }
    }
  }, Stdlib__Int.isEven)), /* [] */0));
  Jest.test("drops none because all items are odd, returns list without changes", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.dropWhile({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: {
          hd: 7,
          tl: /* [] */0
        }
      }
    }
  }, Stdlib__Int.isEven)), {
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: {
          hd: 7,
          tl: /* [] */0
        }
      }
    }
  }));
});

Jest.describe("take", () => {
  Jest.test("normal", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.take({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 2)), {
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }));
  Jest.test("from an empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.take(/* [] */0, 2)), undefined));
  Jest.test("overflow", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.take({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }
  }, 8)), undefined));
  Jest.test("overflow", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.take({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }
  }, -1)), undefined));
});

Jest.describe("takeWhile", () => {
  Jest.test("takes items until isEven returns false, returns list of items until first odd item", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.takeWhile({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: {
          hd: 7,
          tl: {
            hd: 8,
            tl: {
              hd: 9,
              tl: /* [] */0
            }
          }
        }
      }
    }
  }, Stdlib__Int.isEven)), {
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("takes items in list of dispersed items until isEven returns false, returns list of items until first odd item", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.takeWhile({
    hd: 2,
    tl: {
      hd: 6,
      tl: {
        hd: 7,
        tl: {
          hd: 15,
          tl: {
            hd: 10,
            tl: {
              hd: 9,
              tl: {
                hd: 8,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  }, Stdlib__Int.isEven)), {
    hd: 2,
    tl: {
      hd: 6,
      tl: /* [] */0
    }
  }));
  Jest.test("takes no items as first item returns false to isEven, returns empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.takeWhile({
    hd: 1,
    tl: {
      hd: 6,
      tl: {
        hd: 7,
        tl: {
          hd: 15,
          tl: {
            hd: 10,
            tl: {
              hd: 9,
              tl: {
                hd: 8,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  }, Stdlib__Int.isEven)), /* [] */0));
  Jest.test("takes all items as all items return true to isEven, returns list without changes", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.takeWhile({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    }
  }, Stdlib__Int.isEven)), {
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("returns empty list from arg empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.takeWhile(/* [] */0, Stdlib__Int.isEven)), /* [] */0));
  Jest.test("takes no items as all items return false to isEven, returns empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.takeWhile({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }
  }, Stdlib__Int.isEven)), /* [] */0));
});

Jest.describe("findIndex", () => {
  Jest.test("returns the first (index, element) tuple which f returns true for", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.findIndex({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 8,
          tl: /* [] */0
        }
      }
    }
  }, (index, number) => {
    if (index > 2) {
      return Stdlib__Int.isEven(number);
    } else {
      return false;
    }
  })), [
    3,
    8
  ]));
  Jest.test("returns `None` if `f` returns false for all elements ", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.findIndex({
    hd: 0,
    tl: {
      hd: 2,
      tl: {
        hd: 4,
        tl: {
          hd: 8,
          tl: /* [] */0
        }
      }
    }
  }, (param, param$1) => false)), undefined));
  Jest.test("returns `None` for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.findIndex(/* [] */0, (index, number) => {
    if (index > 2) {
      return Stdlib__Int.isEven(number);
    } else {
      return false;
    }
  })), undefined));
});

Jest.describe("includes", () => {
  Jest.test("includes int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.includes({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: {
          hd: 7,
          tl: /* [] */0
        }
      }
    }
  }, 3, (prim0, prim1) => prim0 === prim1)), true));
  Jest.test("does not includes int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.includes({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: {
          hd: 7,
          tl: /* [] */0
        }
      }
    }
  }, 4, (prim0, prim1) => prim0 === prim1)), false));
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.includes(/* [] */0, 5, (prim0, prim1) => prim0 === prim1)), false));
});

Jest.describe("reverse", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.reverse(/* [] */0)), /* [] */0));
  Jest.test("one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.reverse({
    hd: 0,
    tl: /* [] */0
  })), {
    hd: 0,
    tl: /* [] */0
  }));
  Jest.test("two elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.reverse({
    hd: 0,
    tl: {
      hd: 1,
      tl: /* [] */0
    }
  })), {
    hd: 1,
    tl: {
      hd: 0,
      tl: /* [] */0
    }
  }));
});

Jest.describe("map2", () => {
  Jest.test("map2 empty lists", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map2(/* [] */0, /* [] */0, (prim0, prim1) => prim0 + prim1 | 0)), /* [] */0));
  Jest.test("map2 one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map2({
    hd: 1,
    tl: /* [] */0
  }, {
    hd: 1,
    tl: /* [] */0
  }, (prim0, prim1) => prim0 + prim1 | 0)), {
    hd: 2,
    tl: /* [] */0
  }));
  Jest.test("map2 two elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map2({
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }, (prim0, prim1) => prim0 + prim1 | 0)), {
    hd: 2,
    tl: {
      hd: 4,
      tl: /* [] */0
    }
  }));
  Jest.test("map2 with lists of different lengths", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map2({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, {
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }, (prim0, prim1) => prim0 + prim1 | 0)), {
    hd: 2,
    tl: {
      hd: 4,
      tl: /* [] */0
    }
  }));
});

Jest.describe("map3", () => {
  Jest.test("map3 empty lists", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map3(/* [] */0, /* [] */0, /* [] */0, (x, y, z) => (x + y | 0) + z | 0)), /* [] */0));
  Jest.test("map3 one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map3({
    hd: 1,
    tl: /* [] */0
  }, {
    hd: 1,
    tl: /* [] */0
  }, {
    hd: 1,
    tl: /* [] */0
  }, (x, y, z) => (x + y | 0) + z | 0)), {
    hd: 3,
    tl: /* [] */0
  }));
  Jest.test("map3 two elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map3({
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }, (x, y, z) => (x + y | 0) + z | 0)), {
    hd: 3,
    tl: {
      hd: 6,
      tl: /* [] */0
    }
  }));
  Jest.test("map3 elements on lists of different lengths", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map3({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, {
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }, (x, y, z) => (x + y | 0) + z | 0)), {
    hd: 3,
    tl: {
      hd: 6,
      tl: /* [] */0
    }
  }));
});

Jest.describe("mapWithIndex", () => {
  Jest.test("on an empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.mapWithIndex(/* [] */0, (param, i) => i)), /* [] */0));
  Jest.test("with a single element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.mapWithIndex({
    hd: /* 'a' */97,
    tl: /* [] */0
  }, (param, i) => i)), {
    hd: 0,
    tl: /* [] */0
  }));
  Jest.test("with two elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.mapWithIndex({
    hd: /* 'a' */97,
    tl: {
      hd: /* 'b' */98,
      tl: /* [] */0
    }
  }, (param, i) => i)), {
    hd: 0,
    tl: {
      hd: 1,
      tl: /* [] */0
    }
  }));
});

Jest.describe("flatMap", () => {
  Jest.test("normal", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.flatMap({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, x => ({
    hd: x,
    tl: {
      hd: x,
      tl: /* [] */0
    }
  }))), {
    hd: 1,
    tl: {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }
      }
    }
  }));
  Jest.test("on an empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.flatMap(/* [] */0, x => ({
    hd: x,
    tl: {
      hd: x,
      tl: /* [] */0
    }
  }))), /* [] */0));
  Jest.test("deeper list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.flatMap({
    hd: {
      hd: 1,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    },
    tl: {
      hd: {
        hd: 2,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: 3,
          tl: /* [] */0
        },
        tl: /* [] */0
      }
    }
  }, x => Stdlib__List.append(x, {
    hd: 1,
    tl: /* [] */0
  }))), {
    hd: 1,
    tl: {
      hd: 1,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: {
              hd: 3,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  }));
});

Jest.describe("sliding", () => {
  Jest.test("size 1", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sliding(undefined, {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, 1)), {
    hd: {
      hd: 1,
      tl: /* [] */0
    },
    tl: {
      hd: {
        hd: 2,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: 3,
          tl: /* [] */0
        },
        tl: {
          hd: {
            hd: 4,
            tl: /* [] */0
          },
          tl: {
            hd: {
              hd: 5,
              tl: /* [] */0
            },
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("size 2", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sliding(undefined, {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, 2)), {
    hd: {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    },
    tl: {
      hd: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: 4,
            tl: {
              hd: 5,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }
      }
    }
  }));
  Jest.test("step 3 ", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sliding(undefined, {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, 3)), {
    hd: {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    },
    tl: {
      hd: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 3,
          tl: {
            hd: 4,
            tl: {
              hd: 5,
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }
  }));
  Jest.test("size 2, step 2", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sliding(2, {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, 2)), {
    hd: {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    },
    tl: {
      hd: {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      },
      tl: /* [] */0
    }
  }));
  Jest.test("size 1, step 3", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sliding(3, {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, 1)), {
    hd: {
      hd: 1,
      tl: /* [] */0
    },
    tl: {
      hd: {
        hd: 4,
        tl: /* [] */0
      },
      tl: /* [] */0
    }
  }));
  Jest.test("size 2, step 3", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sliding(3, {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, 2)), {
    hd: {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    },
    tl: {
      hd: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      },
      tl: /* [] */0
    }
  }));
  Jest.test("step 7", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sliding(undefined, {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, 7)), /* [] */0));
});

Jest.describe("groupWhile", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.groupWhile(/* [] */0, (prim0, prim1) => prim0 === prim1)), /* [] */0));
  Jest.test("normal char", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.groupWhile({
    hd: "a",
    tl: {
      hd: "b",
      tl: {
        hd: "b",
        tl: {
          hd: "a",
          tl: {
            hd: "a",
            tl: {
              hd: "a",
              tl: {
                hd: "b",
                tl: {
                  hd: "a",
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    }
  }, (prim0, prim1) => prim0 !== prim1)), {
    hd: {
      hd: "a",
      tl: /* [] */0
    },
    tl: {
      hd: {
        hd: "b",
        tl: {
          hd: "b",
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: "a",
          tl: {
            hd: "a",
            tl: {
              hd: "a",
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: "b",
            tl: /* [] */0
          },
          tl: {
            hd: {
              hd: "a",
              tl: /* [] */0
            },
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("normal int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.groupWhile({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: {
          hd: 5,
          tl: {
            hd: 3,
            tl: {
              hd: 1,
              tl: {
                hd: 8,
                tl: {
                  hd: 7,
                  tl: {
                    hd: 9,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }
  }, (x, y) => x % 2 !== y % 2)), {
    hd: {
      hd: 2,
      tl: {
        hd: 4,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    },
    tl: {
      hd: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 8,
          tl: /* [] */0
        },
        tl: {
          hd: {
            hd: 7,
            tl: {
              hd: 9,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }
      }
    }
  }));
});

Jest.describe("join", () => {
  Jest.test("normal", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.join({
    hd: "Ant",
    tl: {
      hd: "Bat",
      tl: {
        hd: "Cat",
        tl: /* [] */0
      }
    }
  }, ", ")), "Ant, Bat, Cat"));
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.join(/* [] */0, ", ")), ""));
});

Jest.describe("partition", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.partition(/* [] */0, Stdlib__Int.isEven)), [
    /* [] */0,
    /* [] */0
  ]));
  Jest.test("one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.partition({
    hd: 1,
    tl: /* [] */0
  }, Stdlib__Int.isEven)), [
    /* [] */0,
    {
      hd: 1,
      tl: /* [] */0
    }
  ]));
  Jest.test("four elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.partition({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }
  }, Stdlib__Int.isEven)), [
    {
      hd: 2,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    },
    {
      hd: 1,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  ]));
});

Jest.describe("sort", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sort(/* [] */0, Primitive_int.compare)), /* [] */0));
  Jest.test("one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sort({
    hd: 5,
    tl: /* [] */0
  }, Primitive_int.compare)), {
    hd: 5,
    tl: /* [] */0
  }));
  Jest.test("multiple elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sort({
    hd: 5,
    tl: {
      hd: 6,
      tl: {
        hd: 8,
        tl: {
          hd: 3,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    }
  }, Primitive_int.compare)), {
    hd: 3,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: {
          hd: 6,
          tl: {
            hd: 8,
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("with negative", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sort({
    hd: 5,
    tl: {
      hd: 6,
      tl: {
        hd: -8,
        tl: {
          hd: 3,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    }
  }, Primitive_int.compare)), {
    hd: -8,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    }
  }));
});

Jest.describe("sortBy", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sortBy(/* [] */0, x => x)), /* [] */0));
  Jest.test("one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sortBy({
    hd: 5,
    tl: /* [] */0
  }, x => x)), {
    hd: 5,
    tl: /* [] */0
  }));
  Jest.test("sort records", () => {
    let s1 = {
      id: 200,
      name: "Syd"
    };
    let s2 = {
      id: 53,
      name: "Bill"
    };
    let s3 = {
      id: 30,
      name: "Carmen"
    };
    let studentList_1 = {
      hd: s2,
      tl: {
        hd: s3,
        tl: /* [] */0
      }
    };
    let studentList = {
      hd: s1,
      tl: studentList_1
    };
    let sortedRecs = Stdlib__List.sortBy(studentList, x => x.id);
    return Jest.Expect.toEqual(Jest.Expect.expect(sortedRecs), {
      hd: s3,
      tl: {
        hd: s2,
        tl: {
          hd: s1,
          tl: /* [] */0
        }
      }
    });
  });
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sortBy({
    hd: 3,
    tl: {
      hd: 2,
      tl: {
        hd: 5,
        tl: {
          hd: -2,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }
  }, x => Math.imul(x, x))), {
    hd: 2,
    tl: {
      hd: -2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }));
});

Jest.describe("uniqueBy", () => {
  Jest.test("int self", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.uniqueBy({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 7,
            tl: {
              hd: 7,
              tl: {
                hd: 6,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  }, element => String(element))), {
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 7,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("math", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.uniqueBy({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 7,
            tl: {
              hd: 7,
              tl: {
                hd: 6,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  }, element => String(Primitive_int.mod_(5, element)))), {
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 7,
          tl: /* [] */0
        }
      }
    }
  }));
  Jest.test("string self", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.uniqueBy({
    hd: "hello",
    tl: {
      hd: "h",
      tl: {
        hd: "e",
        tl: {
          hd: "hello",
          tl: {
            hd: "l",
            tl: {
              hd: "l",
              tl: {
                hd: "o",
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  }, element => element)), {
    hd: "hello",
    tl: {
      hd: "h",
      tl: {
        hd: "e",
        tl: {
          hd: "l",
          tl: {
            hd: "o",
            tl: /* [] */0
          }
        }
      }
    }
  }));
});

Jest.describe("minimumBy", () => {
  Jest.test("minimumBy non-empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.minimumBy({
    hd: 7,
    tl: {
      hd: 9,
      tl: {
        hd: 15,
        tl: {
          hd: 10,
          tl: {
            hd: 3,
            tl: {
              hd: 22,
              tl: /* [] */0
            }
          }
        }
      }
    }
  }, x => x % 12)), 15));
  Jest.test("minimumBy empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.minimumBy(/* [] */0, x => x % 12)), undefined));
});

Jest.describe("maximumBy", () => {
  Jest.test("maximumBy non-empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.maximumBy({
    hd: 7,
    tl: {
      hd: 9,
      tl: {
        hd: 15,
        tl: {
          hd: 10,
          tl: {
            hd: 3,
            tl: {
              hd: 22,
              tl: /* [] */0
            }
          }
        }
      }
    }
  }, x => x % 12)), 10));
  Jest.test("maximumBy empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.maximumBy(/* [] */0, x => x % 12)), undefined));
});

Jest.describe("minimum", () => {
  Jest.test("minimum non-empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.minimum({
    hd: 7,
    tl: {
      hd: 9,
      tl: {
        hd: 15,
        tl: {
          hd: 10,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }
  }, Primitive_int.compare)), 3));
  Jest.test("minimum empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.minimum(/* [] */0, Primitive_int.compare)), undefined));
});

Jest.describe("maximum", () => {
  Jest.test("maximum non-empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.maximum({
    hd: 7,
    tl: {
      hd: 9,
      tl: {
        hd: 15,
        tl: {
          hd: 10,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }
  }, Primitive_int.compare)), 15));
  Jest.test("maximum empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.maximum(/* [] */0, Primitive_int.compare)), undefined));
});

Jest.describe("extent", () => {
  Jest.test("return tuple of min and max", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.extent({
    hd: 7,
    tl: {
      hd: 5,
      tl: {
        hd: 8,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    }
  }, Primitive_int.compare)), [
    5,
    8
  ]));
  Jest.test("return tuple of min and max from single element list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.extent({
    hd: 5,
    tl: /* [] */0
  }, Primitive_int.compare)), [
    5,
    5
  ]));
  Jest.test("return tuple of min and max from empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.extent(/* [] */0, Primitive_int.compare)), undefined));
});

Jest.describe("sum", () => {
  Jest.test("sum of empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sum(/* [] */0, {
    zero: Stdlib__Int.zero,
    add: Stdlib__Int.add
  })), 0));
  Jest.test("sum of ints", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sum({
    hd: 1,
    tl: {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }
  }, {
    zero: Stdlib__Int.zero,
    add: Stdlib__Int.add
  })), 7));
  Jest.test("sum with module struct", () => {
    let add = (prim0, prim1) => prim0 + prim1;
    return Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.sum({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, {
      zero: "",
      add: add
    })), "abc");
  });
});

Jest.describe("map", () => {
  Jest.test("map sqrt", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map({
    hd: 1.0,
    tl: {
      hd: 4.0,
      tl: {
        hd: 9.0,
        tl: /* [] */0
      }
    }
  }, prim => Math.sqrt(prim))), {
    hd: 1.0,
    tl: {
      hd: 2.0,
      tl: {
        hd: 3.0,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("list char", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map({
    hd: {
      hd: /* 'i' */105,
      tl: /* [] */0
    },
    tl: {
      hd: {
        hd: /* 'a' */97,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: /* 'o' */111,
          tl: {
            hd: /* 'p' */112,
            tl: /* [] */0
          }
        },
        tl: /* [] */0
      }
    }
  }, element => Stdlib__List.cons(element, /* 'h' */104))), {
    hd: {
      hd: /* 'h' */104,
      tl: {
        hd: /* 'i' */105,
        tl: /* [] */0
      }
    },
    tl: {
      hd: {
        hd: /* 'h' */104,
        tl: {
          hd: /* 'a' */97,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: /* 'h' */104,
          tl: {
            hd: /* 'o' */111,
            tl: {
              hd: /* 'p' */112,
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }
  }));
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.map(/* [] */0, prim => Math.sqrt(prim))), /* [] */0));
});

Jest.describe("find", () => {
  Jest.test("find first of 2 matches", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.find({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 8,
          tl: /* [] */0
        }
      }
    }
  }, Stdlib__Int.isEven)), 4));
  Jest.test("find 0 of 0 matches", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.find({
    hd: 0,
    tl: {
      hd: 2,
      tl: {
        hd: 4,
        tl: {
          hd: 8,
          tl: /* [] */0
        }
      }
    }
  }, Stdlib__Int.isOdd)), undefined));
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.find(/* [] */0, Stdlib__Int.isEven)), undefined));
});

Jest.describe("isEmpty", () => {
  Jest.test("from empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.isEmpty(Stdlib__List.empty)), true));
  Jest.test("from empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.isEmpty(/* [] */0)), true));
  Jest.test("from list with elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.isEmpty({
    hd: 1,
    tl: {
      hd: -4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    }
  })), false));
});

Jest.describe("length", () => {
  Jest.test("from empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.length(/* [] */0)), 0));
  Jest.test("from list with elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.length({
    hd: 1,
    tl: {
      hd: -4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    }
  })), 4));
});

Jest.describe("any", () => {
  Jest.test("from empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.any(/* [] */0, Stdlib__Int.isEven)), false));
  Jest.test("from even list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.any({
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, Stdlib__Int.isEven)), true));
  Jest.test("from odd list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.any({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, Stdlib__Int.isEven)), false));
});

Jest.describe("all", () => {
  Jest.test("from empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.all(/* [] */0, Stdlib__Int.isEven)), true));
  Jest.test("from even list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.all({
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, Stdlib__Int.isEven)), false));
  Jest.test("from all even list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.all({
    hd: 2,
    tl: {
      hd: 4,
      tl: /* [] */0
    }
  }, Stdlib__Int.isEven)), true));
  Jest.test("from odd list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.any({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, Stdlib__Int.isEven)), false));
});

Jest.describe("count", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.count(/* [] */0, Stdlib__Int.isEven)), 0));
  Jest.test("one even element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.count({
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, Stdlib__Int.isEven)), 1));
  Jest.test("all even elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.count({
    hd: 2,
    tl: {
      hd: 4,
      tl: /* [] */0
    }
  }, Stdlib__Int.isEven)), 2));
});

Jest.describe("splitAt", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitAt(/* [] */0, 1)), undefined));
  Jest.test("at evens", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitAt({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    }
  }, 0)), [
    /* [] */0,
    {
      hd: 2,
      tl: {
        hd: 4,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    }
  ]));
  Jest.test("four elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 2,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }
  }, 2)), [
    {
      hd: 1,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    },
    {
      hd: 2,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    }
  ]));
  Jest.test("at end", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }
  }, 3)), [
    {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    },
    /* [] */0
  ]));
  Jest.test("past end", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }
  }, 6)), undefined));
  Jest.test("negative", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }
  }, -1)), undefined));
});

Jest.describe("splitWhen", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitWhen(/* [] */0, Stdlib__Int.isEven)), [
    /* [] */0,
    /* [] */0
  ]));
  Jest.test("the first element satisfies f", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitWhen({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    }
  }, Stdlib__Int.isEven)), [
    /* [] */0,
    {
      hd: 2,
      tl: {
        hd: 4,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    }
  ]));
  Jest.test("the last element satisfies f", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitWhen({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 2,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }
  }, Stdlib__Int.isEven)), [
    {
      hd: 1,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    },
    {
      hd: 2,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    }
  ]));
  Jest.test("no element satisfies f", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.splitWhen({
    hd: 1,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }
  }, Stdlib__Int.isEven)), [
    {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    },
    /* [] */0
  ]));
});

Jest.describe("intersperse", () => {
  Jest.test("intersperse empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.intersperse(/* [] */0, "on")), /* [] */0));
  Jest.test("intersperse one turtle", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.intersperse({
    hd: "turtles",
    tl: /* [] */0
  }, "on")), {
    hd: "turtles",
    tl: /* [] */0
  }));
  Jest.test("intersperse three turtles", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.intersperse({
    hd: "turtles",
    tl: {
      hd: "turtles",
      tl: {
        hd: "turtles",
        tl: /* [] */0
      }
    }
  }, "on")), {
    hd: "turtles",
    tl: {
      hd: "on",
      tl: {
        hd: "turtles",
        tl: {
          hd: "on",
          tl: {
            hd: "turtles",
            tl: /* [] */0
          }
        }
      }
    }
  }));
});

Jest.describe("initial", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.initial(/* [] */0)), undefined));
  Jest.test("one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.initial({
    hd: /* 'a' */97,
    tl: /* [] */0
  })), /* [] */0));
  Jest.test("two elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.initial({
    hd: /* 'a' */97,
    tl: {
      hd: /* 'b' */98,
      tl: /* [] */0
    }
  })), {
    hd: /* 'a' */97,
    tl: /* [] */0
  }));
});

Jest.describe("last", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.last(/* [] */0)), undefined));
  Jest.test("one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.last({
    hd: /* 'a' */97,
    tl: /* [] */0
  })), /* 'a' */97));
  Jest.test("two elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.last({
    hd: /* 'a' */97,
    tl: {
      hd: /* 'b' */98,
      tl: /* [] */0
    }
  })), /* 'b' */98));
});

Jest.describe("get", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.get(/* [] */0, 2)), undefined));
  Jest.test("normal", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.get({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 1)), 2));
  Jest.test("overflow", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.get({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 100)), undefined));
  Jest.test("negative index", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.get({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, -2)), undefined));
});

Jest.describe("append", () => {
  Jest.test("append empty lists", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.append(/* [] */0, /* [] */0)), /* [] */0));
  Jest.test("append empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.append(/* [] */0, {
    hd: "turtles",
    tl: /* [] */0
  })), {
    hd: "turtles",
    tl: /* [] */0
  }));
  Jest.test("append empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.append({
    hd: "turtles",
    tl: /* [] */0
  }, /* [] */0)), {
    hd: "turtles",
    tl: /* [] */0
  }));
  Jest.test("append two lists", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.append({
    hd: "on",
    tl: /* [] */0
  }, {
    hd: "turtles",
    tl: /* [] */0
  })), {
    hd: "on",
    tl: {
      hd: "turtles",
      tl: /* [] */0
    }
  }));
});

Jest.describe("fold", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.fold(/* [] */0, /* [] */0, Stdlib__List.cons)), /* [] */0));
  Jest.test("one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.fold({
    hd: 1,
    tl: /* [] */0
  }, /* [] */0, Stdlib__List.cons)), {
    hd: 1,
    tl: /* [] */0
  }));
  Jest.test("three elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.fold({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, /* [] */0, Stdlib__List.cons)), {
    hd: 3,
    tl: {
      hd: 2,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("foldr empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.foldRight(/* [] */0, /* [] */0, Stdlib__List.cons)), /* [] */0));
  Jest.test("foldr one element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.foldRight({
    hd: 1,
    tl: /* [] */0
  }, /* [] */0, Stdlib__List.cons)), {
    hd: 1,
    tl: /* [] */0
  }));
  Jest.test("foldr three elements", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.foldRight({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, /* [] */0, Stdlib__List.cons)), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("-", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.fold({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 0, (prim0, prim1) => prim0 - prim1 | 0)), -6));
  Jest.test("- foldRight", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.foldRight({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }, 0, (prim0, prim1) => prim0 - prim1 | 0)), -6));
});

Jest.describe("insertAt", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.insertAt(/* [] */0, 0, 1)), {
    hd: 1,
    tl: /* [] */0
  }));
  Jest.test("in the middle", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.insertAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 1, 2)), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("in the front", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.insertAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 0, 2)), {
    hd: 2,
    tl: {
      hd: 1,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("after end of list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.insertAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 4, 2)), {
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
  Jest.test("#216", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.insertAt({
    hd: 0,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: {
              hd: 6,
              tl: {
                hd: 7,
                tl: {
                  hd: 8,
                  tl: {
                    hd: 9,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }
  }, 5, 1)), {
    hd: 0,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: {
              hd: 1,
              tl: {
                hd: 6,
                tl: {
                  hd: 7,
                  tl: {
                    hd: 8,
                    tl: {
                      hd: 9,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }));
  Jest.test("doc 1", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.insertAt({
    hd: 100,
    tl: {
      hd: 101,
      tl: {
        hd: 102,
        tl: {
          hd: 103,
          tl: /* [] */0
        }
      }
    }
  }, 2, 999)), {
    hd: 100,
    tl: {
      hd: 101,
      tl: {
        hd: 999,
        tl: {
          hd: 102,
          tl: {
            hd: 103,
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("doc 2", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.insertAt({
    hd: 100,
    tl: {
      hd: 101,
      tl: {
        hd: 102,
        tl: {
          hd: 103,
          tl: /* [] */0
        }
      }
    }
  }, 0, 999)), {
    hd: 999,
    tl: {
      hd: 100,
      tl: {
        hd: 101,
        tl: {
          hd: 102,
          tl: {
            hd: 103,
            tl: /* [] */0
          }
        }
      }
    }
  }));
  Jest.test("doc 3", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.insertAt({
    hd: 100,
    tl: {
      hd: 101,
      tl: {
        hd: 102,
        tl: {
          hd: 103,
          tl: /* [] */0
        }
      }
    }
  }, 4, 999)), {
    hd: 100,
    tl: {
      hd: 101,
      tl: {
        hd: 102,
        tl: {
          hd: 103,
          tl: {
            hd: 999,
            tl: /* [] */0
          }
        }
      }
    }
  }));
});

Jest.describe("updateAt", () => {
  Jest.test("updateAt index smaller 0", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.updateAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, -1, x => x + 1 | 0)), {
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
  Jest.test("updateAt empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.updateAt(/* [] */0, 0, x => x + 1 | 0)), /* [] */0));
  Jest.test("updateAt empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.updateAt(/* [] */0, 2, x => x + 1 | 0)), /* [] */0));
  Jest.test("updateAt inside the list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.updateAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 1, x => x + 1 | 0)), {
    hd: 1,
    tl: {
      hd: 4,
      tl: /* [] */0
    }
  }));
  Jest.test("updateAt in the front", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.updateAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 0, x => x + 1 | 0)), {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
  Jest.test("updateAt after end of list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.updateAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 4, x => x + 1 | 0)), {
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
});

Jest.describe("flatten", () => {
  Jest.test("two empty lists", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.flat({
    hd: /* [] */0,
    tl: {
      hd: /* [] */0,
      tl: /* [] */0
    }
  })), /* [] */0));
  Jest.test("one empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.flat({
    hd: {
      hd: 1,
      tl: /* [] */0
    },
    tl: {
      hd: /* [] */0,
      tl: /* [] */0
    }
  })), {
    hd: 1,
    tl: /* [] */0
  }));
  Jest.test("one empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.flat({
    hd: /* [] */0,
    tl: {
      hd: {
        hd: 1,
        tl: /* [] */0
      },
      tl: /* [] */0
    }
  })), {
    hd: 1,
    tl: /* [] */0
  }));
  Jest.test("several lists", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.flat({
    hd: {
      hd: 1,
      tl: /* [] */0
    },
    tl: {
      hd: {
        hd: 2,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: 3,
          tl: /* [] */0
        },
        tl: /* [] */0
      }
    }
  })), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }));
  Jest.test("several lists", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.flat({
    hd: {
      hd: 1,
      tl: /* [] */0
    },
    tl: {
      hd: /* [] */0,
      tl: {
        hd: {
          hd: 2,
          tl: /* [] */0
        },
        tl: {
          hd: /* [] */0,
          tl: {
            hd: {
              hd: 3,
              tl: /* [] */0
            },
            tl: /* [] */0
          }
        }
      }
    }
  })), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }));
});

Jest.describe("zip", () => {
  Jest.test("zip num and string", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.zip({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, {
    hd: "Dog",
    tl: {
      hd: "Eagle",
      tl: {
        hd: "Ferret",
        tl: /* [] */0
      }
    }
  })), {
    hd: [
      1,
      "Dog"
    ],
    tl: {
      hd: [
        2,
        "Eagle"
      ],
      tl: {
        hd: [
          3,
          "Ferret"
        ],
        tl: /* [] */0
      }
    }
  }));
  Jest.test("zip num and empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.zip({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    }
  }, /* [] */0)), /* [] */0));
});

Jest.describe("unzip", () => Jest.test("unzip num and bool", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.unzip({
  hd: [
    0,
    true
  ],
  tl: {
    hd: [
      17,
      false
    ],
    tl: {
      hd: [
        1337,
        true
      ],
      tl: /* [] */0
    }
  }
})), [
  {
    hd: 0,
    tl: {
      hd: 17,
      tl: {
        hd: 1337,
        tl: /* [] */0
      }
    }
  },
  {
    hd: true,
    tl: {
      hd: false,
      tl: {
        hd: true,
        tl: /* [] */0
      }
    }
  }
])));

Jest.describe("chunksOf", () => {
  Jest.test("empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.chunksOf(/* [] */0, 2)), /* [] */0));
  Jest.test("normal", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.chunksOf({
    hd: "#FFBA49",
    tl: {
      hd: "#9984D4",
      tl: {
        hd: "#20A39E",
        tl: {
          hd: "#EF5B5B",
          tl: {
            hd: "#23001E",
            tl: /* [] */0
          }
        }
      }
    }
  }, 2)), {
    hd: {
      hd: "#FFBA49",
      tl: {
        hd: "#9984D4",
        tl: /* [] */0
      }
    },
    tl: {
      hd: {
        hd: "#20A39E",
        tl: {
          hd: "#EF5B5B",
          tl: /* [] */0
        }
      },
      tl: /* [] */0
    }
  }));
});

Jest.describe("initialize", () => {
  Jest.test("initialize length 0", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.initialize(0, i => i)), /* [] */0));
  Jest.test("initialize length 1", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.initialize(1, i => i)), {
    hd: 0,
    tl: /* [] */0
  }));
  Jest.test("initialize length 2", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.initialize(2, i => i)), {
    hd: 0,
    tl: {
      hd: 1,
      tl: /* [] */0
    }
  }));
});

Jest.describe("removeAt", () => {
  Jest.test("removeAt index smaller 0", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.removeAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, -1)), {
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
  Jest.test("removeAt empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.removeAt(/* [] */0, 0)), /* [] */0));
  Jest.test("removeAt empty list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.removeAt(/* [] */0, 2)), /* [] */0));
  Jest.test("removeAt index 1", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.removeAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 1)), {
    hd: 1,
    tl: /* [] */0
  }));
  Jest.test("removeAt index 0", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.removeAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 0)), {
    hd: 3,
    tl: /* [] */0
  }));
  Jest.test("removeAt after end of list", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.removeAt({
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, 4)), {
    hd: 1,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
});

Jest.describe("groupBy", () => {
  Jest.test("returns an empty map for an empty array", () => Jest.Expect.toEqual(Jest.Expect.expect(TableclothMap.length(Stdlib__List.groupBy(/* [] */0, {
    comparator: Stdlib__Int.comparator
  }, prim => prim.length))), 0));
  Jest.test("example test case", () => Jest.Expect.toEqual(Jest.Expect.expect(TableclothMap.toList(Stdlib__List.groupBy({
    hd: "Ant",
    tl: {
      hd: "Bear",
      tl: {
        hd: "Cat",
        tl: {
          hd: "Dewgong",
          tl: /* [] */0
        }
      }
    }
  }, {
    comparator: Stdlib__Int.comparator
  }, prim => prim.length))), {
    hd: [
      3,
      {
        hd: "Cat",
        tl: {
          hd: "Ant",
          tl: /* [] */0
        }
      }
    ],
    tl: {
      hd: [
        4,
        {
          hd: "Bear",
          tl: /* [] */0
        }
      ],
      tl: {
        hd: [
          7,
          {
            hd: "Dewgong",
            tl: /* [] */0
          }
        ],
        tl: /* [] */0
      }
    }
  }));
});

Jest.describe("toArray", () => {
  Jest.test("returns an array of int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.toArray({
    hd: 2,
    tl: {
      hd: 4,
      tl: {
        hd: 6,
        tl: {
          hd: 8,
          tl: /* [] */0
        }
      }
    }
  })), [
    2,
    4,
    6,
    8
  ]));
  Jest.test("empty", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.toArray(/* [] */0)), []));
  Jest.test("returns an array of char", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.toArray({
    hd: /* 'h' */104,
    tl: {
      hd: /* 'i' */105,
      tl: /* [] */0
    }
  })), [
    /* 'h' */104,
    /* 'i' */105
  ]));
});

Jest.describe("equal", () => {
  Jest.test("normal int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.equal({
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, {
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, (prim0, prim1) => prim0 === prim1)), true));
  Jest.test("normal int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.equal({
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: -6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, {
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, (prim0, prim1) => prim0 === prim1)), false));
  Jest.test("normal string", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.equal({
    hd: "hi",
    tl: {
      hd: "hello",
      tl: {
        hd: "hey",
        tl: /* [] */0
      }
    }
  }, {
    hd: "hi",
    tl: {
      hd: "hello",
      tl: {
        hd: "hey",
        tl: /* [] */0
      }
    }
  }, (prim0, prim1) => prim0 === prim1)), true));
});

Jest.describe("compare", () => {
  Jest.test("normal int", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.compare({
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, {
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, Primitive_int.compare)), 0));
  Jest.test("normal int with different element", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.compare({
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: -6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, {
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, Primitive_int.compare)), -1));
  Jest.test("normal int with shorter and longer array", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.compare({
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: {
          hd: 11,
          tl: /* [] */0
        }
      }
    }
  }, {
    hd: 2,
    tl: {
      hd: 5,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    }
  }, Primitive_int.compare)), 1));
  Jest.test("normal string", () => Jest.Expect.toEqual(Jest.Expect.expect(Stdlib__List.compare({
    hd: "hi",
    tl: {
      hd: "hello",
      tl: {
        hd: "hey",
        tl: /* [] */0
      }
    }
  }, {
    hd: "hi",
    tl: {
      hd: "hello",
      tl: {
        hd: "hey",
        tl: /* [] */0
      }
    }
  }, Stdlib__String.compare)), 0));
});

/*  Not a pure module */
