open Stdlib

open Jest
open Expect

open! Math
open! Float

test("zero", () => expect(zero)->toEqual(0.))
test("one", () => expect(one)->toEqual(1.))
test("nan", () => expect(nan == nan)->toEqual(false))
test("infinity", () => expect(infinity *. 2. == infinity)->toEqual(true))
test("negativeInfinity", () =>
  expect(Constants.negativeInfinity *. 2. == Constants.negativeInfinity)->toEqual(true)
)
describe("equals", () => test("zero", () => expect(0. == -0.)->toEqual(true)))
describe("fromString", () => {
  test("NaN", () => expect(fromString("NaN"))->toEqual(None))
  test("nan", () => expect(fromString("nan"))->toEqual(None))
  test("Infinity", () => expect(fromString("Infinity"))->toEqual(Some(infinity)))
  test("infinity", () => expect(fromString("infinity"))->toEqual(None))

  test("infinity", () => expect(fromString("infinity"))->toEqual(None))
  test("55", () => expect(fromString("55"))->toEqual(Some(55.)))
  test("-100", () => expect(fromString("-100"))->toEqual(Some(-100.)))
  test("not number", () => expect(fromString("not number"))->toEqual(None))
})
describe("add", () => test("add", () => expect(add(3.14, 3.14))->toEqual(6.28)))
describe("subtract", () => test("subtract", () => expect(subtract(4., 3.))->toEqual(1.)))
describe("multiply", () => test("multiply", () => expect(multiply(2., 7.))->toEqual(14.)))
describe("divide", () => {
  test("divide", () => expect(divide(3.14, ~by=2.))->toEqual(1.57))
  test("divide by zero", () => expect(divide(3.14, ~by=0.) == infinity)->toEqual(true))
  test("divide by negative zero", () =>
    expect(divide(3.14, ~by=-0.) == Constants.negativeInfinity)->toEqual(true)
  )
})
describe("power", () => {
  module Math = Math
  test("power", () => expect(Math.pow(7., ~exp=3.))->toEqual(343.))
  test("0 base", () => expect(Math.pow(0., ~exp=3.))->toEqual(0.))
  test("0 exponent", () => expect(Math.pow(7., ~exp=0.))->toEqual(1.))
})
describe("negate", () => {
  test("positive number", () => expect(negate(8.))->toEqual(-8.))
  test("negative number", () => expect(negate(-7.))->toEqual(7.))
  test("zero", () => expect(negate(0.))->toEqual(-0.))
})
describe("absolute", () => {
  module Math = Math
  test("positive number", () => expect(Math.abs(8.))->toEqual(8.))
  test("negative number", () => expect(Math.abs(-7.))->toEqual(7.))
  test("zero", () => expect(Math.abs(0.))->toEqual(0.))
})
describe("maximum", () => {
  test("positive numbers", () => expect(max(7., 9.))->toEqual(9.))
  test("negative numbers", () => expect(max(-4., -1.))->toEqual(-1.))
  test("nan", () => expect(isNaN(max(7., nan)))->toEqual(true))
  test("infinity", () => expect(max(7., infinity) == infinity)->toEqual(true))
  test("negativeInfinity", () => expect(max(7., Constants.negativeInfinity))->toEqual(7.))
})
describe("minimum", () => {
  test("positive numbers", () => expect(min(7., 9.))->toEqual(7.))
  test("negative numbers", () => expect(min(-4., -1.))->toEqual(-4.))
  test("nan", () => expect(isNaN(min(7., nan)))->toEqual(true))
  test("infinity", () => expect(min(7., infinity))->toEqual(7.))
  test("negativeInfinity", () =>
    expect(min(7., Constants.negativeInfinity) == Constants.negativeInfinity)->toEqual(true)
  )
})
describe("clamp", () => {
  test("in range", () => expect(clamp(~min=0., ~max=8., 5.))->toEqual(5.))
  test("above range", () => expect(clamp(~min=0., ~max=8., 9.))->toEqual(8.))
  test("below range", () => expect(clamp(~min=2., ~max=8., 1.))->toEqual(2.))
  test("above negative range", () => expect(clamp(~min=-10., ~max=-5., 5.))->toEqual(-5.))
  test("below negative range", () => expect(clamp(~min=-10., ~max=-5., -15.))->toEqual(-10.))
  //  test("nan upper bound", () => expect(isNaN(clamp(~min=-7.9, ~max=nan, -6.6)))->toEqual(true))
  //  test("nan lower bound", () => expect(isNaN(clamp(~min=nan, ~max=0., -6.6)))->toEqual(true))
  test("nan value", () => expect(isNaN(clamp(~min=2., ~max=8., nan)))->toEqual(true))
  //  test("invalid arguments", () => toThrow(expect(() => clamp(~min=7., ~max=1., 3.))))
})
describe("squareRoot", () => {
  test("whole numbers", () => expect(sqrt(4.))->toEqual(2.))
  test("decimal numbers", () => expect(sqrt(20.25))->toEqual(4.5))
  test("negative number", () => expect(isNaN(sqrt(-1.)))->toEqual(true))
})
describe("log", () => {
  test("base 10", () => expect(log(~base=10., 100.))->toEqual(2.))
  test("base 2", () => expect(log(~base=2., 256.))->toEqual(8.))
  test("of zero", () => expect(log(~base=10., 0.) == Constants.negativeInfinity)->toEqual(true))
})
describe("isNaN", () => {
  test("nan", () => expect(isNaN(nan))->toEqual(true))
  test("non-nan", () => expect(isNaN(91.4))->toEqual(false))
})
describe("isFinite", () => {
  test("infinity", () => expect(isFinite(infinity))->toEqual(false))
  test("negative infinity", () => expect(isFinite(Constants.negativeInfinity))->toEqual(false))
  test("NaN", () => expect(isFinite(nan))->toEqual(false))
  testAll("regular numbers", list{-5., -0.314, 0., 3.14}, n => expect(isFinite(n))->toEqual(true))
})
describe("isInfinite", () => {
  test("infinity", () => expect(isInfinite(infinity))->toEqual(true))
  test("negative infinity", () => expect(isInfinite(Constants.negativeInfinity))->toEqual(true))
  test("NaN", () => expect(isInfinite(nan))->toEqual(false))
  testAll("regular numbers", list{-5., -0.314, 0., 3.14}, n =>
    expect(isInfinite(n))->toEqual(false)
  )
})
describe("inRange", () => {
  test("in range", () => expect(inRange(~lower=2., ~upper=4., 3.))->toEqual(true))
  test("above range", () => expect(inRange(~lower=2., ~upper=4., 8.))->toEqual(false))
  test("below range", () => expect(inRange(~lower=2., ~upper=4., 1.))->toEqual(false))
  test("equal to ~upper", () => expect(inRange(~lower=1., ~upper=2., 2.))->toEqual(false))
  test("negative range", () => expect(inRange(~lower=-7.9, ~upper=-5.2, -6.6))->toEqual(true))
  test("nan upper bound", () => expect(inRange(~lower=-7.9, ~upper=nan, -6.6))->toEqual(false))
  test("nan lower bound", () => expect(inRange(~lower=nan, ~upper=0., -6.6))->toEqual(false))
  test("nan value", () => expect(inRange(~lower=2., ~upper=8., nan))->toEqual(false))
  test("invalid arguments", () => toThrow(expect(() => inRange(~lower=7., ~upper=1., 3.))))
})
test("hypotenuse", () => expect(Math.hypot(3., 4.))->toEqual(5.))
test("degrees", () => expect(degrees(180.))->toEqual(Math.Constants.pi))
test("radians", () => expect(radians(Math.Constants.pi))->toEqual(Math.Constants.pi))
test("turns", () => expect(turns(1.))->toEqual(2. *. Math.Constants.pi))
describe("ofPolar", () => {
  let (x, y) = fromPolar((sqrt(2.), degrees(45.)))
  test("x", () => expect(x)->toBeCloseTo(1.))
  test("y", () => expect(y)->toEqual(1.))
})
describe("toPolar", () => {
  test("toPolar", () => expect(toPolar((3.0, 4.0)))->toEqual((5.0, 0.9272952180016122)))
  let (r, theta) = toPolar((5.0, 12.0))
  testAll("toPolar", list{(r, 13.0), (theta, 1.17601)}, ((actual, expected)) =>
    expect(actual)->toBeCloseTo(expected)
  )
})
describe("cos", () => {
  test("cos", () => expect(cos(degrees(60.)))->toBeCloseTo(0.5))
  test("cos", () => expect(cos(radians(Math.Constants.pi /. 3.)))->toBeCloseTo(0.5))
})
describe("acos", () => test("1 / 2", () => expect(acos(1. /. 2.))->toBeCloseTo(1.0472)))
describe("sin", () => {
  test("30 degrees", () => expect(sin(degrees(30.)))->toBeCloseTo(0.5))
  test("pi / 6", () => expect(sin(radians(Math.Constants.pi /. 6.)))->toBeCloseTo(0.5))
})
describe("asin", () => test("asin", () => expect(asin(1. /. 2.))->toBeCloseTo(0.523599)))
describe("tan", () => {
  test("45 degrees", () => expect(tan(degrees(45.)))->toEqual(0.9999999999999999))
  test("pi / 4", () => expect(tan(radians(Math.Constants.pi /. 4.)))->toEqual(0.9999999999999999))
  test("0", () => expect(tan(0.))->toEqual(0.))
})
describe("atan", () => {
  test("0", () => expect(atan(0.))->toEqual(0.))
  test("1 / 1", () => expect(atan(1. /. 1.))->toEqual(0.7853981633974483))
  test("1 / -1", () => expect(atan(1. /. -1.))->toEqual(-0.7853981633974483))
  test("-1 / -1", () => expect(atan(-1. /. -1.))->toEqual(0.7853981633974483))
  test("-1 / -1", () => expect(atan(-1. /. 1.))->toEqual(-0.7853981633974483))
})
describe("atan2", () => {
  test("0", () => expect(atan2(~y=0., ~x=0.))->toEqual(0.))
  test("(1, 1)", () => expect(atan2(~y=1., ~x=1.))->toEqual(0.7853981633974483))
  test("(-1, 1)", () => expect(atan2(~y=1., ~x=-1.))->toEqual(2.3561944901923449))
  test("(-1 -1)", () => expect(atan2(~y=-1., ~x=-1.))->toEqual(-2.3561944901923449))
  test("(1, -1)", () => expect(atan2(~y=-1., ~x=1.))->toEqual(-0.7853981633974483))
})
describe("round", () => {
  test("`Zero", () => expect(round(~direction=#Zero, 1.2))->toEqual(1.))
  test("`Zero", () => expect(round(~direction=#Zero, 1.5))->toEqual(1.))
  test("`Zero", () => expect(round(~direction=#Zero, 1.8))->toEqual(1.))
  test("`Zero", () => expect(round(~direction=#Zero, -1.2))->toEqual(-1.))
  test("`Zero", () => expect(round(~direction=#Zero, -1.5))->toEqual(-1.))
  test("`Zero", () => expect(round(~direction=#Zero, -1.8))->toEqual(-1.))
  test("`AwayFromZero", () => expect(round(~direction=#AwayFromZero, 1.2))->toEqual(2.))
  test("`AwayFromZero", () => expect(round(~direction=#AwayFromZero, 1.5))->toEqual(2.))
  test("`AwayFromZero", () => expect(round(~direction=#AwayFromZero, 1.8))->toEqual(2.))
  test("`AwayFromZero", () => expect(round(~direction=#AwayFromZero, -1.2))->toEqual(-2.))
  test("`AwayFromZero", () => expect(round(~direction=#AwayFromZero, -1.5))->toEqual(-2.))
  test("`AwayFromZero", () => expect(round(~direction=#AwayFromZero, -1.8))->toEqual(-2.))
  test("`Up", () => expect(round(~direction=#Up, 1.2))->toEqual(2.))
  test("`Up", () => expect(round(~direction=#Up, 1.5))->toEqual(2.))
  test("`Up", () => expect(round(~direction=#Up, 1.8))->toEqual(2.))
  test("`Up", () => expect(round(~direction=#Up, -1.2))->toEqual(-1.))
  test("`Up", () => expect(round(~direction=#Up, -1.5))->toEqual(-1.))
  test("`Up", () => expect(round(~direction=#Up, -1.8))->toEqual(-1.))
  test("`Down", () => expect(round(~direction=#Down, 1.2))->toEqual(1.))
  test("`Down", () => expect(round(~direction=#Down, 1.5))->toEqual(1.))
  test("`Down", () => expect(round(~direction=#Down, 1.8))->toEqual(1.))
  test("`Down", () => expect(round(~direction=#Down, -1.2))->toEqual(-2.))
  test("`Down", () => expect(round(~direction=#Down, -1.5))->toEqual(-2.))
  test("`Down", () => expect(round(~direction=#Down, -1.8))->toEqual(-2.))
  test("`Closest `Zero", () => expect(round(~direction=#Closest(#Zero), 1.2))->toEqual(1.))
  test("`Closest `Zero", () => expect(round(~direction=#Closest(#Zero), 1.5))->toEqual(1.))
  test("`Closest `Zero", () => expect(round(~direction=#Closest(#Zero), 1.8))->toEqual(2.))
  test("`Closest `Zero", () => expect(round(~direction=#Closest(#Zero), -1.2))->toEqual(-1.))
  test("`Closest `Zero", () => expect(round(~direction=#Closest(#Zero), -1.5))->toEqual(-1.))
  test("`Closest `Zero", () => expect(round(~direction=#Closest(#Zero), -1.8))->toEqual(-2.))
  test("`Closest `AwayFromZero", () =>
    expect(round(~direction=#Closest(#AwayFromZero), 1.2))->toEqual(1.)
  )
  test("`Closest `AwayFromZero", () =>
    expect(round(~direction=#Closest(#AwayFromZero), 1.5))->toEqual(2.)
  )
  test("`Closest `AwayFromZero", () =>
    expect(round(~direction=#Closest(#AwayFromZero), 1.8))->toEqual(2.)
  )
  test("`Closest `AwayFromZero", () =>
    expect(round(~direction=#Closest(#AwayFromZero), -1.2))->toEqual(-1.)
  )
  test("`Closest `AwayFromZero", () =>
    expect(round(~direction=#Closest(#AwayFromZero), -1.5))->toEqual(-2.)
  )
  test("`Closest `AwayFromZero", () =>
    expect(round(~direction=#Closest(#AwayFromZero), -1.8))->toEqual(-2.)
  )
  test("`Closest `Up", () => expect(round(~direction=#Closest(#Up), 1.2))->toEqual(1.))
  test("`Closest `Up", () => expect(round(~direction=#Closest(#Up), 1.5))->toEqual(2.))
  test("`Closest `Up", () => expect(round(~direction=#Closest(#Up), 1.8))->toEqual(2.))
  test("`Closest `Up", () => expect(round(~direction=#Closest(#Up), -1.2))->toEqual(-1.))
  test("`Closest `Up", () => expect(round(~direction=#Closest(#Up), -1.5))->toEqual(-1.))
  test("`Closest `Up", () => expect(round(~direction=#Closest(#Up), -1.8))->toEqual(-2.))
  test("`Closest `Down", () => expect(round(~direction=#Closest(#Down), 1.2))->toEqual(1.))
  test("`Closest `Down", () => expect(round(~direction=#Closest(#Down), 1.5))->toEqual(1.))
  test("`Closest `Down", () => expect(round(~direction=#Closest(#Down), 1.8))->toEqual(2.))
  test("`Closest `Down", () => expect(round(~direction=#Closest(#Down), -1.2))->toEqual(-1.))
  test("`Closest `Down", () => expect(round(~direction=#Closest(#Down), -1.5))->toEqual(-2.))
  test("`Closest `Down", () => expect(round(~direction=#Closest(#Down), -1.8))->toEqual(-2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), 1.2))->toEqual(1.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), 1.5))->toEqual(2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), 1.8))->toEqual(2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), 2.2))->toEqual(2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), 2.5))->toEqual(2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), 2.8))->toEqual(3.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), -1.2))->toEqual(-1.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), -1.5))->toEqual(-2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), -1.8))->toEqual(-2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), -2.2))->toEqual(-2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), -2.5))->toEqual(-2.))
  test("`Closest `ToEven", () => expect(round(~direction=#Closest(#ToEven), -2.8))->toEqual(-3.))
})
describe("floor", () => {
  test("floor", () => expect(floor(1.2))->toEqual(1.))
  test("floor", () => expect(floor(1.5))->toEqual(1.))
  test("floor", () => expect(floor(1.8))->toEqual(1.))
  test("floor", () => expect(floor(-1.2))->toEqual(-2.))
  test("floor", () => expect(floor(-1.5))->toEqual(-2.))
  test("floor", () => expect(floor(-1.8))->toEqual(-2.))
})
describe("ceil", () => {
  test("ceil", () => expect(ceil(1.2))->toEqual(2.))
  test("ceil", () => expect(ceil(1.5))->toEqual(2.))
  test("ceil", () => expect(ceil(1.8))->toEqual(2.))
  test("ceil", () => expect(ceil(-1.2))->toEqual(-1.))
  test("ceil", () => expect(ceil(-1.5))->toEqual(-1.))
  test("ceil", () => expect(ceil(-1.8))->toEqual(-1.))
})
describe("trunc", () => {
  test("trunc", () => expect(trunc(1.2))->toEqual(1.))
  test("trunc", () => expect(trunc(1.5))->toEqual(1.))
  test("trunc", () => expect(trunc(1.8))->toEqual(1.))
  test("trunc", () => expect(trunc(-1.2))->toEqual(-1.))
  test("trunc", () => expect(trunc(-1.5))->toEqual(-1.))
  test("trunc", () => expect(trunc(-1.8))->toEqual(-1.))
})
describe("fromInt", () => {
  test("5", () => expect(fromInt(5))->toEqual(5.0))
  test("0", () => expect(zero)->toEqual(0.0))
  test("-7", () => expect(fromInt(-7))->toEqual(-7.0))
})
describe("toInt", () => {
  test("5.", () => expect(toInt(5.))->toEqual(5))
  test("5.3", () => expect(toInt(5.3))->toEqual(5))
  test("0.", () => expect(toInt(0.))->toEqual(0))
  test("-7.", () => expect(toInt(-7.))->toEqual(-7))
  test("nan", () => expect(toInt(nan))->toEqual(0))
  test("infinity", () => expect(toInt(infinity))->toEqual(0))
  test("negativeInfinity", () => expect(toInt(Constants.negativeInfinity))->toEqual(0))
})

describe("isInteger", () => {
  test("true", () => expect(isInteger(5.0))->toEqual(true))
  test("false", () => expect(isInteger(Math.Constants.pi))->toEqual(false))
})
