// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Math from "rescript/lib/es6/Math.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Primitive_bigint from "rescript/lib/es6/Primitive_bigint.js";

function gcd(_a, _b) {
  while (true) {
    let b = _b;
    let a = _a;
    if (a <= 0) {
      return b;
    }
    _b = a;
    _a = Primitive_int.mod_(b, a);
    continue;
  };
}

function lcm(a, b) {
  return Primitive_int.div(Math.imul(a, b), gcd(a, b));
}

function gcd$1(_a, _b) {
  while (true) {
    let b = _b;
    let a = _a;
    if (a <= BigInt(0)) {
      return b;
    }
    _b = a;
    _a = Primitive_bigint.mod_(b, a);
    continue;
  };
}

function lcm$1(a, b) {
  return Primitive_bigint.div(a * b, gcd$1(a, b));
}

function max(a, b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

function min(a, b) {
  if (a < b) {
    return a;
  } else {
    return b;
  }
}

let $$BigInt$1 = {
  $$BigInt: undefined,
  gcd: gcd$1,
  lcm: lcm$1,
  max: max,
  min: min
};

let Constants = $$Math.Constants;

let Int = $$Math.Int;

export {
  Constants,
  Int,
  gcd,
  lcm,
  $$BigInt$1 as $$BigInt,
}
/* No side effect */
