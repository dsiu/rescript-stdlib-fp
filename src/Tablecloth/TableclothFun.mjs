// Generated by ReScript, PLEASE EDIT WITH CARE

import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function constant(a, param) {
  return a;
}

function sequence(param, b) {
  return b;
}

function flip(f, x, y) {
  return f(y, x);
}

function negate(f, t) {
  return !f(t);
}

function apply(f, a) {
  return f(a);
}

function tap(a, f) {
  f(a);
  return a;
}

function times(_n, f) {
  while(true) {
    var n = _n;
    if (n <= 0) {
      return ;
    }
    f();
    _n = n - 1 | 0;
    continue ;
  };
}

function forever(f) {
  try {
    while(true) {
      f();
    };
    return PervasivesU.failwith("[while true] managed to return, you are in trouble now.");
  }
  catch (raw_exn){
    return Caml_js_exceptions.internalToOCamlException(raw_exn);
  }
}

function curry(f, a, b) {
  return f([
              a,
              b
            ]);
}

function uncurry(f, param) {
  return f(param[0], param[1]);
}

function curry3(f, a, b, c) {
  return f([
              a,
              b,
              c
            ]);
}

function uncurry3(f, param) {
  return f(param[0], param[1], param[2]);
}

export {
  constant ,
  sequence ,
  flip ,
  negate ,
  apply ,
  tap ,
  forever ,
  times ,
  curry ,
  uncurry ,
  curry3 ,
  uncurry3 ,
}
/* No side effect */
