// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_array from "rescript/lib/es6/caml_array.js";

function make(a, b) {
  return [
          a,
          b
        ];
}

function fromArray(array) {
  var len = array.length;
  if (len >= 3) {
    return [
            Caml_array.get(array, 0),
            Caml_array.get(array, 1)
          ];
  }
  switch (len) {
    case 0 :
    case 1 :
        return ;
    case 2 :
        var a = array[0];
        var b = array[1];
        return [
                a,
                b
              ];
    
  }
}

function fromList(list) {
  if (!list) {
    return ;
  }
  var match = list.tl;
  if (match) {
    return [
            list.hd,
            match.hd
          ];
  }
  
}

function first(param) {
  return param[0];
}

function second(param) {
  return param[1];
}

function mapFirst(param, f) {
  return [
          f(param[0]),
          param[1]
        ];
}

function mapSecond(param, f) {
  return [
          param[0],
          f(param[1])
        ];
}

function mapEach(param, f, g) {
  return [
          f(param[0]),
          g(param[1])
        ];
}

function mapAll(param, f) {
  return [
          f(param[0]),
          f(param[1])
        ];
}

function swap(param) {
  return [
          param[1],
          param[0]
        ];
}

function toArray(param) {
  return [
          param[0],
          param[1]
        ];
}

function toList(param) {
  return {
          hd: param[0],
          tl: {
            hd: param[1],
            tl: /* [] */0
          }
        };
}

function equal(param, param$1, equalFirst, equalSecond) {
  if (equalFirst(param[0], param$1[0])) {
    return equalSecond(param[1], param$1[1]);
  } else {
    return false;
  }
}

function compare(param, param$1, compareFirst, compareSecond) {
  var result = compareFirst(param[0], param$1[0]);
  if (result !== 0) {
    return result;
  } else {
    return compareSecond(param[1], param$1[1]);
  }
}

export {
  make ,
  fromArray ,
  fromList ,
  first ,
  second ,
  mapFirst ,
  mapSecond ,
  mapEach ,
  mapAll ,
  swap ,
  toArray ,
  toList ,
  equal ,
  compare ,
}
/* No side effect */
