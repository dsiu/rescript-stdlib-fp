// Generated by ReScript, PLEASE EDIT WITH CARE


function make(a, b) {
  return [
    a,
    b
  ];
}

function fromArray(array) {
  let len = array.length;
  if (len >= 3) {
    return [
      array[0],
      array[1]
    ];
  }
  switch (len) {
    case 0 :
    case 1 :
      return;
    case 2 :
      let a = array[0];
      let b = array[1];
      return [
        a,
        b
      ];
  }
}

function fromList(list) {
  if (!list) {
    return;
  }
  let match = list.tl;
  if (match) {
    return [
      list.hd,
      match.hd
    ];
  }
  
}

function first(param) {
  return param[0];
}

function second(param) {
  return param[1];
}

function mapFirst(param, f) {
  return [
    f(param[0]),
    param[1]
  ];
}

function mapSecond(param, f) {
  return [
    param[0],
    f(param[1])
  ];
}

function mapEach(param, f, g) {
  return [
    f(param[0]),
    g(param[1])
  ];
}

function mapAll(param, f) {
  return [
    f(param[0]),
    f(param[1])
  ];
}

function swap(param) {
  return [
    param[1],
    param[0]
  ];
}

function toArray(param) {
  return [
    param[0],
    param[1]
  ];
}

function toList(param) {
  return {
    hd: param[0],
    tl: {
      hd: param[1],
      tl: /* [] */0
    }
  };
}

function equal(param, param$1, equalFirst, equalSecond) {
  if (equalFirst(param[0], param$1[0])) {
    return equalSecond(param[1], param$1[1]);
  } else {
    return false;
  }
}

function compare(param, param$1, compareFirst, compareSecond) {
  let result = compareFirst(param[0], param$1[0]);
  if (result !== 0) {
    return result;
  } else {
    return compareSecond(param[1], param$1[1]);
  }
}

export {
  make,
  fromArray,
  fromList,
  first,
  second,
  mapFirst,
  mapSecond,
  mapEach,
  mapAll,
  swap,
  toArray,
  toList,
  equal,
  compare,
}
/* No side effect */
