// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";

function make(a, b, c, d) {
  return [
          a,
          b,
          c,
          d
        ];
}

function fromArray(array) {
  var len = array.length;
  if (len >= 5) {
    return [
            Caml_array.get(array, 0),
            Caml_array.get(array, 1),
            Caml_array.get(array, 2),
            Caml_array.get(array, 3)
          ];
  }
  switch (len) {
    case 0 :
    case 1 :
    case 2 :
    case 3 :
        return ;
    case 4 :
        var a = array[0];
        var b = array[1];
        var c = array[2];
        var d = array[3];
        return [
                a,
                b,
                c,
                d
              ];
    
  }
}

function fromList(list) {
  if (!list) {
    return ;
  }
  var match = list.tl;
  if (!match) {
    return ;
  }
  var match$1 = match.tl;
  if (!match$1) {
    return ;
  }
  var match$2 = match$1.tl;
  if (match$2) {
    return [
            list.hd,
            match.hd,
            match$1.hd,
            match$2.hd
          ];
  }
  
}

function first(param) {
  return param[0];
}

function second(param) {
  return param[1];
}

function third(param) {
  return param[2];
}

function forth(param) {
  return param[3];
}

function initial(param) {
  return [
          param[0],
          param[1]
        ];
}

function tail(param) {
  return [
          param[2],
          param[3]
        ];
}

function mapFirst(param, f) {
  return [
          Curry._1(f, param[0]),
          param[1],
          param[2],
          param[3]
        ];
}

function mapSecond(param, f) {
  return [
          param[0],
          Curry._1(f, param[1]),
          param[2],
          param[3]
        ];
}

function mapThird(param, f) {
  return [
          param[0],
          param[1],
          Curry._1(f, param[2]),
          param[3]
        ];
}

function mapForth(param, f) {
  return [
          param[0],
          param[1],
          param[2],
          Curry._1(f, param[3])
        ];
}

function mapEach(param, f, g, h, i) {
  return [
          Curry._1(f, param[0]),
          Curry._1(g, param[1]),
          Curry._1(h, param[2]),
          Curry._1(i, param[3])
        ];
}

function mapAll(param, f) {
  return [
          Curry._1(f, param[0]),
          Curry._1(f, param[1]),
          Curry._1(f, param[2]),
          Curry._1(f, param[3])
        ];
}

function rotateLeft(param) {
  return [
          param[1],
          param[2],
          param[3],
          param[0]
        ];
}

function rotateRight(param) {
  return [
          param[3],
          param[0],
          param[1],
          param[2]
        ];
}

function toArray(param) {
  return [
          param[0],
          param[1],
          param[2],
          param[3]
        ];
}

function toList(param) {
  return {
          hd: param[0],
          tl: {
            hd: param[1],
            tl: {
              hd: param[2],
              tl: {
                hd: param[3],
                tl: /* [] */0
              }
            }
          }
        };
}

function equal(param, param$1, equalFirst, equalSecond, equalThird, equalForth) {
  if (Curry._2(equalFirst, param[0], param$1[0]) && Curry._2(equalSecond, param[1], param$1[1]) && Curry._2(equalThird, param[2], param$1[2])) {
    return Curry._2(equalForth, param[3], param$1[3]);
  } else {
    return false;
  }
}

function compare(param, param$1, compareFirst, compareSecond, compareThird, compareForth) {
  var result = Curry._2(compareFirst, param[0], param$1[0]);
  if (result !== 0) {
    return result;
  }
  var result$1 = Curry._2(compareSecond, param[1], param$1[1]);
  if (result$1 !== 0) {
    return result$1;
  }
  var result$2 = Curry._2(compareThird, param[2], param$1[2]);
  if (result$2 !== 0) {
    return result$2;
  } else {
    return Curry._2(compareForth, param[3], param$1[3]);
  }
}

export {
  make ,
  fromArray ,
  fromList ,
  first ,
  second ,
  third ,
  forth ,
  initial ,
  tail ,
  mapFirst ,
  mapSecond ,
  mapThird ,
  mapForth ,
  mapEach ,
  mapAll ,
  rotateLeft ,
  rotateRight ,
  toArray ,
  toList ,
  equal ,
  compare ,
}
/* No side effect */
