// Generated by ReScript, PLEASE EDIT WITH CARE


function make(a, b, c, d) {
  return [
    a,
    b,
    c,
    d
  ];
}

function fromArray(array) {
  let len = array.length;
  if (len >= 5) {
    return [
      array[0],
      array[1],
      array[2],
      array[3]
    ];
  }
  switch (len) {
    case 0 :
    case 1 :
    case 2 :
    case 3 :
      return;
    case 4 :
      let a = array[0];
      let b = array[1];
      let c = array[2];
      let d = array[3];
      return [
        a,
        b,
        c,
        d
      ];
  }
}

function fromList(list) {
  if (!list) {
    return;
  }
  let match = list.tl;
  if (!match) {
    return;
  }
  let match$1 = match.tl;
  if (!match$1) {
    return;
  }
  let match$2 = match$1.tl;
  if (match$2) {
    return [
      list.hd,
      match.hd,
      match$1.hd,
      match$2.hd
    ];
  }
  
}

function first(param) {
  return param[0];
}

function second(param) {
  return param[1];
}

function third(param) {
  return param[2];
}

function forth(param) {
  return param[3];
}

function initial(param) {
  return [
    param[0],
    param[1]
  ];
}

function tail(param) {
  return [
    param[2],
    param[3]
  ];
}

function mapFirst(param, f) {
  return [
    f(param[0]),
    param[1],
    param[2],
    param[3]
  ];
}

function mapSecond(param, f) {
  return [
    param[0],
    f(param[1]),
    param[2],
    param[3]
  ];
}

function mapThird(param, f) {
  return [
    param[0],
    param[1],
    f(param[2]),
    param[3]
  ];
}

function mapForth(param, f) {
  return [
    param[0],
    param[1],
    param[2],
    f(param[3])
  ];
}

function mapEach(param, f, g, h, i) {
  return [
    f(param[0]),
    g(param[1]),
    h(param[2]),
    i(param[3])
  ];
}

function mapAll(param, f) {
  return [
    f(param[0]),
    f(param[1]),
    f(param[2]),
    f(param[3])
  ];
}

function rotateLeft(param) {
  return [
    param[1],
    param[2],
    param[3],
    param[0]
  ];
}

function rotateRight(param) {
  return [
    param[3],
    param[0],
    param[1],
    param[2]
  ];
}

function toArray(param) {
  return [
    param[0],
    param[1],
    param[2],
    param[3]
  ];
}

function toList(param) {
  return {
    hd: param[0],
    tl: {
      hd: param[1],
      tl: {
        hd: param[2],
        tl: {
          hd: param[3],
          tl: /* [] */0
        }
      }
    }
  };
}

function equal(param, param$1, equalFirst, equalSecond, equalThird, equalForth) {
  if (equalFirst(param[0], param$1[0]) && equalSecond(param[1], param$1[1]) && equalThird(param[2], param$1[2])) {
    return equalForth(param[3], param$1[3]);
  } else {
    return false;
  }
}

function compare(param, param$1, compareFirst, compareSecond, compareThird, compareForth) {
  let result = compareFirst(param[0], param$1[0]);
  if (result !== 0) {
    return result;
  }
  let result$1 = compareSecond(param[1], param$1[1]);
  if (result$1 !== 0) {
    return result$1;
  }
  let result$2 = compareThird(param[2], param$1[2]);
  if (result$2 !== 0) {
    return result$2;
  } else {
    return compareForth(param[3], param$1[3]);
  }
}

export {
  make,
  fromArray,
  fromList,
  first,
  second,
  third,
  forth,
  initial,
  tail,
  mapFirst,
  mapSecond,
  mapThird,
  mapForth,
  mapEach,
  mapAll,
  rotateLeft,
  rotateRight,
  toArray,
  toList,
  equal,
  compare,
}
/* No side effect */
