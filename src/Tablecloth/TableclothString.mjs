// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_array from "rescript/lib/es6/Js_array.js";
import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as Core__List from "@rescript/core/src/Core__List.mjs";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as TableclothChar from "./TableclothChar.mjs";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as Primitive_string from "rescript/lib/es6/Primitive_string.js";
import * as TableclothComparator from "./TableclothComparator.mjs";

let compare = Primitive_object.compare;

let include = TableclothComparator.Make({
  compare: compare
});

function initialize(length, f) {
  return Core__Array.fromInitializer(length, index => TableclothChar.toString(f(index))).join("");
}

function fromArray(characters) {
  return characters.map(character => String.fromCharCode(TableclothChar.toCode(character))).join("");
}

function fromList(t) {
  return Core__List.toArray(t).map(character => String.fromCharCode(TableclothChar.toCode(character))).join("");
}

function fromChar(c) {
  return String.fromCharCode(TableclothChar.toCode(c));
}

function isEmpty(t) {
  return t === "";
}

function uncons(s) {
  if (s === "") {
    return;
  } else {
    return [
      s[0],
      s.slice(1)
    ];
  }
}

function dropLeft(s, count) {
  return s.slice(count);
}

function dropRight(s, count) {
  if (count < 1) {
    return s;
  } else {
    return s.slice(0, -count | 0);
  }
}

function uncapitalize(str) {
  return str.charAt(0).toLowerCase() + str.slice(1);
}

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function isCapitalized(s) {
  return s === capitalize(s);
}

function reverse(s) {
  let r = s.split("");
  r.reverse();
  return r.join("");
}

function toArray(t) {
  return Js_array.map(characterString => Belt_Option.getExn(TableclothChar.fromString(characterString)), Array.from(t));
}

function toList(s) {
  return Belt_List.fromArray(toArray(s));
}

function insertAt(t, index, value) {
  return t.slice(0, index) + (value + t.slice(index));
}

function forEach(t, f) {
  Js_array.forEach(a => f(a), toArray(t));
}

function fold(t, initial, f) {
  return Core__Array.reduce(toArray(t), initial, (a, ch) => f(a, ch));
}

let compare$1 = Primitive_string.compare;

let comparator = include.comparator;

export {
  fromChar,
  fromArray,
  fromList,
  initialize,
  reverse,
  isEmpty,
  isCapitalized,
  dropLeft,
  dropRight,
  insertAt,
  uncapitalize,
  capitalize,
  uncons,
  forEach,
  fold,
  toArray,
  toList,
  compare$1 as compare,
  comparator,
}
/* include Not a pure module */
