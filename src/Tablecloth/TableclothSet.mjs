// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/List.js";
import * as Belt_Set from "rescript/lib/es6/Belt_Set.js";
import * as Internal from "./Internal.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";

function empty(comparator) {
  return Belt_Set.make(Internal.toBeltComparator(comparator));
}

function singleton(element, comparator) {
  return Belt_Set.fromArray([element], Internal.toBeltComparator(comparator));
}

function fromArray(elements, comparator) {
  return Belt_Set.fromArray(elements, Internal.toBeltComparator(comparator));
}

function fromList(elements, comparator) {
  return Belt_Set.fromArray(List.toArray(elements), Internal.toBeltComparator(comparator));
}

let length = Belt_Set.size;

let isEmpty = Belt_Set.isEmpty;

let includes = Belt_Set.has;

let add = Belt_Set.add;

let remove = Belt_Set.remove;

let difference = Belt_Set.diff;

let intersection = Belt_Set.intersect;

let union = Belt_Set.union;

function filter(s, f) {
  return Belt_Set.keep(s, a => f(a));
}

function partition(s, f) {
  return Belt_Set.partition(s, a => f(a));
}

function find(s, f) {
  return Belt_Array.getBy(Belt_Set.toArray(s), a => f(a));
}

function all(s, f) {
  return Belt_Set.every(s, a => f(a));
}

function any(s, f) {
  return Belt_Set.some(s, a => f(a));
}

function forEach(s, f) {
  Belt_Set.forEach(s, a => f(a));
}

function fold(s, initial, f) {
  return Belt_Set.reduce(s, initial, (a, b) => f(a, b));
}

let toArray = Belt_Set.toArray;

let toList = Belt_Set.toList;

function fromArray$1(a) {
  let cmp = Primitive_object.compare;
  return Belt_Set.fromArray(a, {
    cmp: cmp
  });
}

function fromList$1(l) {
  return fromArray$1(List.toArray(l));
}

function empty$1() {
  return fromArray$1([]);
}

function singleton$1(a) {
  return fromArray$1([a]);
}

let fromArray$2 = fromArray$1;

let empty$2 = fromArray$1([]);

function singleton$2(a) {
  return fromArray$1([a]);
}

function fromList$2(l) {
  return fromArray$1(List.toArray(l));
}

let fromArray$3 = fromArray$1;

let empty$3 = fromArray$1([]);

function singleton$3(a) {
  return fromArray$1([a]);
}

function fromList$3(l) {
  return fromArray$1(List.toArray(l));
}

let Poly = {
  empty: empty$1,
  singleton: singleton$1,
  fromArray: fromArray$1,
  fromList: fromList$1
};

let Int = {
  empty: empty$2,
  singleton: singleton$2,
  fromArray: fromArray$2,
  fromList: fromList$2
};

let $$String = {
  empty: empty$3,
  singleton: singleton$3,
  fromArray: fromArray$3,
  fromList: fromList$3
};

export {
  empty,
  singleton,
  fromArray,
  fromList,
  add,
  remove,
  includes,
  length,
  find,
  isEmpty,
  any,
  all,
  difference,
  intersection,
  union,
  filter,
  partition,
  fold,
  forEach,
  toArray,
  toList,
  Poly,
  Int,
  $$String,
}
/* empty Not a pure module */
