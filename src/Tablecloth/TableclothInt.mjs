// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as TableclothComparator from "./TableclothComparator.mjs";

var compare = Caml_obj.compare;

var include = TableclothComparator.Make({
      compare: compare
    });

function add(prim0, prim1) {
  return prim0 + prim1 | 0;
}

function subtract(prim0, prim1) {
  return prim0 - prim1 | 0;
}

function multiply(prim0, prim1) {
  return Math.imul(prim0, prim1);
}

var divide = Caml_int32.div;

function divideFloat(n, by) {
  return n / by;
}

function negate(prim) {
  return -prim | 0;
}

var remainder = Caml_int32.mod_;

function modulo(n, by) {
  return Caml_int32.mod_(n <= 0 ? (PervasivesU.abs(n) << 1) : n, by);
}

function isEven(n) {
  return n % 2 === 0;
}

function isOdd(n) {
  return n % 2 !== 0;
}

function inRange(n, lower, upper) {
  if (Caml_obj.lessthan(upper, lower)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "~lower must be less than or equal to ~upper",
          Error: new Error()
        };
  }
  if (Caml_obj.greaterequal(n, lower)) {
    return Caml_obj.lessthan(n, upper);
  } else {
    return false;
  }
}

var zero = 0;

var one = 1;

var comparator = include.comparator;

export {
  zero ,
  one ,
  add ,
  subtract ,
  multiply ,
  divide ,
  divideFloat ,
  negate ,
  modulo ,
  remainder ,
  isEven ,
  isOdd ,
  inRange ,
  comparator ,
}
/* include Not a pure module */
