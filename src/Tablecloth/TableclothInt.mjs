// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as TableclothComparator from "./TableclothComparator.mjs";

let compare = Primitive_object.compare;

let include = TableclothComparator.Make({
  compare: compare
});

function add(prim0, prim1) {
  return prim0 + prim1 | 0;
}

function subtract(prim0, prim1) {
  return prim0 - prim1 | 0;
}

function multiply(prim0, prim1) {
  return Math.imul(prim0, prim1);
}

let divide = Primitive_int.div;

function divideFloat(n, by) {
  return n / by;
}

function negate(prim) {
  return -prim | 0;
}

let remainder = Primitive_int.mod_;

function modulo(n, by) {
  return Primitive_int.mod_(n <= 0 ? (Pervasives.abs(n) << 1) : n, by);
}

function isEven(n) {
  return n % 2 === 0;
}

function isOdd(n) {
  return n % 2 !== 0;
}

function inRange(n, lower, upper) {
  if (Primitive_object.lessthan(upper, lower)) {
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "~lower must be less than or equal to ~upper",
      Error: new Error()
    };
  }
  if (Primitive_object.greaterequal(n, lower)) {
    return Primitive_object.lessthan(n, upper);
  } else {
    return false;
  }
}

let zero = 0;

let one = 1;

let comparator = include.comparator;

export {
  zero,
  one,
  add,
  subtract,
  multiply,
  divide,
  divideFloat,
  negate,
  modulo,
  remainder,
  isEven,
  isOdd,
  inRange,
  comparator,
}
/* include Not a pure module */
