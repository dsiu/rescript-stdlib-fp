// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as TableclothList from "./TableclothList.mjs";
import * as CamlinternalLazy from "rescript/lib/es6/camlinternalLazy.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function ok(a) {
  return {
          TAG: "Ok",
          _0: a
        };
}

function error(e) {
  return {
          TAG: "Error",
          _0: e
        };
}

function fromOption(ma, error) {
  if (ma !== undefined) {
    return {
            TAG: "Ok",
            _0: Caml_option.valFromOption(ma)
          };
  } else {
    return {
            TAG: "Error",
            _0: error
          };
  }
}

var isError = Belt_Result.isError;

var isOk = Belt_Result.isOk;

function both(a, b) {
  if (a.TAG === "Ok") {
    if (b.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: [
                a._0,
                b._0
              ]
            };
    } else {
      return {
              TAG: "Error",
              _0: b._0
            };
    }
  } else {
    return {
            TAG: "Error",
            _0: a._0
          };
  }
}

function flatten(a) {
  if (a.TAG === "Ok") {
    return a._0;
  } else {
    return {
            TAG: "Error",
            _0: a._0
          };
  }
}

function or_(a, b) {
  if (a.TAG === "Ok") {
    return a;
  } else {
    return b;
  }
}

function orElse(a, b) {
  if (b.TAG === "Ok") {
    return b;
  } else {
    return a;
  }
}

function or_else(a, b) {
  if (b.TAG === "Ok") {
    return b;
  } else {
    return a;
  }
}

function and_(a, b) {
  if (a.TAG === "Ok") {
    return b;
  } else {
    return a;
  }
}

var unwrap = Belt_Result.getWithDefault;

function unwrapLazy(t, $$default) {
  if (t.TAG === "Ok") {
    return t._0;
  } else {
    return CamlinternalLazy.force($$default);
  }
}

var unwrapUnsafe = Belt_Result.getExn;

function unwrapError(t, $$default) {
  if (t.TAG === "Ok") {
    return $$default;
  } else {
    return t._0;
  }
}

function map2(a, b, f) {
  if (a.TAG === "Ok") {
    if (b.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: Curry._2(f, a._0, b._0)
            };
    } else {
      return {
              TAG: "Error",
              _0: b._0
            };
    }
  } else {
    return {
            TAG: "Error",
            _0: a._0
          };
  }
}

function values(t) {
  return List.fold_right((function (c, d) {
                return map2(c, d, (function (a, b) {
                              return {
                                      hd: a,
                                      tl: b
                                    };
                            }));
              }), t, {
              TAG: "Ok",
              _0: /* [] */0
            });
}

function combine(l) {
  return TableclothList.foldRight(l, {
              TAG: "Ok",
              _0: /* [] */0
            }, (function (accum, value) {
                return map2(value, accum, (function (head, list) {
                              return {
                                      hd: head,
                                      tl: list
                                    };
                            }));
              }));
}

function map(t, f) {
  return Belt_Result.map(t, Curry.__1(f));
}

function mapError(t, f) {
  if (t.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: t._0
          };
  } else {
    return {
            TAG: "Error",
            _0: Curry._1(f, t._0)
          };
  }
}

function toOption(r) {
  if (r.TAG === "Ok") {
    return Caml_option.some(r._0);
  }
  
}

function andThen(t, f) {
  return Belt_Result.flatMap(t, Curry.__1(f));
}

function attempt(f) {
  var value;
  try {
    value = Curry._1(f, undefined);
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    return {
            TAG: "Error",
            _0: error
          };
  }
  return {
          TAG: "Ok",
          _0: value
        };
}

function tap(t, f) {
  if (t.TAG === "Ok") {
    return Curry._1(f, t._0);
  }
  
}

function equal(a, b, equalOk, equalError) {
  if (a.TAG === "Ok") {
    if (b.TAG === "Ok") {
      return Curry._2(equalOk, a._0, b._0);
    } else {
      return false;
    }
  } else if (b.TAG === "Ok") {
    return false;
  } else {
    return Curry._2(equalError, a._0, b._0);
  }
}

function compare(a, b, compareOk, compareError) {
  if (a.TAG === "Ok") {
    if (b.TAG === "Ok") {
      return Curry._2(compareOk, a._0, b._0);
    } else {
      return 1;
    }
  } else if (b.TAG === "Ok") {
    return -1;
  } else {
    return Curry._2(compareError, a._0, b._0);
  }
}

export {
  ok ,
  error ,
  attempt ,
  fromOption ,
  isOk ,
  isError ,
  and_ ,
  or_ ,
  orElse ,
  or_else ,
  both ,
  flatten ,
  unwrap ,
  unwrapLazy ,
  unwrapUnsafe ,
  unwrapError ,
  map2 ,
  values ,
  combine ,
  map ,
  mapError ,
  andThen ,
  tap ,
  toOption ,
  equal ,
  compare ,
}
/* TableclothList Not a pure module */
