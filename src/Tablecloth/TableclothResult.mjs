// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Lazy from "rescript/lib/es6/Lazy.js";
import * as Result from "rescript/lib/es6/Result.js";
import * as Belt_Result from "rescript/lib/es6/Belt_Result.js";
import * as TableclothList from "./TableclothList.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

function ok(a) {
  return {
    TAG: "Ok",
    _0: a
  };
}

function error(e) {
  return {
    TAG: "Error",
    _0: e
  };
}

function fromOption(ma, error) {
  if (ma !== undefined) {
    return {
      TAG: "Ok",
      _0: Primitive_option.valFromOption(ma)
    };
  } else {
    return {
      TAG: "Error",
      _0: error
    };
  }
}

function both(a, b) {
  if (a.TAG === "Ok") {
    if (b.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: [
          a._0,
          b._0
        ]
      };
    } else {
      return {
        TAG: "Error",
        _0: b._0
      };
    }
  } else {
    return {
      TAG: "Error",
      _0: a._0
    };
  }
}

function flatten(a) {
  if (a.TAG === "Ok") {
    return a._0;
  } else {
    return {
      TAG: "Error",
      _0: a._0
    };
  }
}

function orElse(a, b) {
  if (a.TAG === "Ok") {
    return a;
  } else {
    return b;
  }
}

function and_(a, b) {
  if (a.TAG === "Ok") {
    return b;
  } else {
    return a;
  }
}

function unwrapLazy(t, $$default) {
  if (t.TAG === "Ok") {
    return t._0;
  } else {
    return Lazy.force($$default);
  }
}

let unwrapUnsafe = Belt_Result.getExn;

function unwrapError(t, $$default) {
  if (t.TAG === "Ok") {
    return $$default;
  } else {
    return t._0;
  }
}

function map2(a, b, f) {
  if (a.TAG === "Ok") {
    if (b.TAG === "Ok") {
      return {
        TAG: "Ok",
        _0: f(a._0, b._0)
      };
    } else {
      return {
        TAG: "Error",
        _0: b._0
      };
    }
  } else {
    return {
      TAG: "Error",
      _0: a._0
    };
  }
}

function values(t) {
  return TableclothList.foldRight(t, {
    TAG: "Ok",
    _0: /* [] */0
  }, (c, d) => map2(d, c, (a, b) => ({
    hd: a,
    tl: b
  })));
}

function combine(l) {
  return TableclothList.foldRight(l, {
    TAG: "Ok",
    _0: /* [] */0
  }, (accum, value) => map2(value, accum, (head, list) => ({
    hd: head,
    tl: list
  })));
}

function toOption(r) {
  if (r.TAG === "Ok") {
    return Primitive_option.some(r._0);
  }
  
}

function attempt(f) {
  let value;
  try {
    value = f();
  } catch (raw_error) {
    let error = Primitive_exceptions.internalToException(raw_error);
    return {
      TAG: "Error",
      _0: error
    };
  }
  return {
    TAG: "Ok",
    _0: value
  };
}

function tap(t, f) {
  if (t.TAG === "Ok") {
    return f(t._0);
  }
  
}

let or_ = orElse;

let unwrap = Result.getOr;

let map = Result.map;

let mapError = Result.mapError;

let andThen = Result.flatMap;

export {
  ok,
  error,
  attempt,
  fromOption,
  and_,
  or_,
  orElse,
  both,
  flatten,
  unwrap,
  unwrapLazy,
  unwrapUnsafe,
  unwrapError,
  map2,
  values,
  combine,
  map,
  mapError,
  andThen,
  tap,
  toOption,
}
/* TableclothList Not a pure module */
