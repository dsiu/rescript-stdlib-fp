// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as Caml_option from "@rescript/std/lib/es6/caml_option.js";
import * as Garter_List from "@greenlabs/garter/src/Garter_List.mjs";

function last(a) {
  return Garter_List.getExn(a, Garter_List.length(a) - 1 | 0);
}

function singleton(__x) {
  return Garter_List.make(1, __x);
}

function flatMap(xs, f) {
  return Garter_List.reduce(Garter_List.map(xs, f), /* [] */0, Garter_List.concat);
}

function listToOption(l) {
  if (l) {
    return Caml_option.some(l.hd);
  }
  
}

function foldLeft(xs, f) {
  var init = Garter_List.getExn(xs, 0);
  var rest = Garter_List.tailExn(xs);
  return Garter_List.reduce(rest, init, f);
}

function combinationIf2(a, b, f) {
  return Garter_List.reduceU(a, /* [] */0, (function (acc, x) {
                return Garter_List.concat(acc, Garter_List.reduceU(b, /* [] */0, (function (acc, y) {
                                  var r = f(x, y);
                                  if (r !== undefined) {
                                    return Garter_List.concat(acc, {
                                                hd: Caml_option.valFromOption(r),
                                                tl: /* [] */0
                                              });
                                  } else {
                                    return acc;
                                  }
                                })));
              }));
}

function combination2(a, b, f) {
  return combinationIf2(a, b, (function (x, y) {
                return Caml_option.some(f(x, y));
              }));
}

function unfold(p, g, b) {
  if (Curry._1(p, b)) {
    return /* [] */0;
  }
  var match = Curry._1(g, b);
  return {
          hd: match[0],
          tl: unfold(p, g, match[1])
        };
}

var length = Garter_List.length;

var size = Garter_List.size;

var head = Garter_List.head;

var headExn = Garter_List.headExn;

var tail = Garter_List.tail;

var tailExn = Garter_List.tailExn;

var add = Garter_List.add;

var get = Garter_List.get;

var getExn = Garter_List.getExn;

var make = Garter_List.make;

var makeByU = Garter_List.makeByU;

var makeBy = Garter_List.makeBy;

var shuffle = Garter_List.shuffle;

var drop = Garter_List.drop;

var take = Garter_List.take;

var splitAt = Garter_List.splitAt;

var concat = Garter_List.concat;

var concatMany = Garter_List.concatMany;

var reverseConcat = Garter_List.reverseConcat;

var flatten = Garter_List.flatten;

var mapU = Garter_List.mapU;

var map = Garter_List.map;

var zip = Garter_List.zip;

var zipByU = Garter_List.zipByU;

var zipBy = Garter_List.zipBy;

var mapWithIndexU = Garter_List.mapWithIndexU;

var mapWithIndex = Garter_List.mapWithIndex;

var fromArray = Garter_List.fromArray;

var toArray = Garter_List.toArray;

var reverse = Garter_List.reverse;

var mapReverseU = Garter_List.mapReverseU;

var mapReverse = Garter_List.mapReverse;

var forEachU = Garter_List.forEachU;

var forEach = Garter_List.forEach;

var forEachWithIndexU = Garter_List.forEachWithIndexU;

var forEachWithIndex = Garter_List.forEachWithIndex;

var reduceU = Garter_List.reduceU;

var reduce = Garter_List.reduce;

var reduceWithIndexU = Garter_List.reduceWithIndexU;

var reduceWithIndex = Garter_List.reduceWithIndex;

var reduceReverseU = Garter_List.reduceReverseU;

var reduceReverse = Garter_List.reduceReverse;

var mapReverse2U = Garter_List.mapReverse2U;

var mapReverse2 = Garter_List.mapReverse2;

var forEach2U = Garter_List.forEach2U;

var forEach2 = Garter_List.forEach2;

var reduce2U = Garter_List.reduce2U;

var reduce2 = Garter_List.reduce2;

var reduceReverse2U = Garter_List.reduceReverse2U;

var reduceReverse2 = Garter_List.reduceReverse2;

var everyU = Garter_List.everyU;

var every = Garter_List.every;

var someU = Garter_List.someU;

var some = Garter_List.some;

var every2U = Garter_List.every2U;

var every2 = Garter_List.every2;

var some2U = Garter_List.some2U;

var some2 = Garter_List.some2;

var cmpByLength = Garter_List.cmpByLength;

var cmpU = Garter_List.cmpU;

var cmp = Garter_List.cmp;

var eqU = Garter_List.eqU;

var eq = Garter_List.eq;

var hasU = Garter_List.hasU;

var has = Garter_List.has;

var getByU = Garter_List.getByU;

var getBy = Garter_List.getBy;

var keepU = Garter_List.keepU;

var keep = Garter_List.keep;

var filter = Garter_List.filter;

var keepWithIndexU = Garter_List.keepWithIndexU;

var keepWithIndex = Garter_List.keepWithIndex;

var filterWithIndex = Garter_List.filterWithIndex;

var keepMapU = Garter_List.keepMapU;

var keepMap = Garter_List.keepMap;

var partitionU = Garter_List.partitionU;

var partition = Garter_List.partition;

var unzip = Garter_List.unzip;

var getAssocU = Garter_List.getAssocU;

var getAssoc = Garter_List.getAssoc;

var hasAssocU = Garter_List.hasAssocU;

var hasAssoc = Garter_List.hasAssoc;

var removeAssocU = Garter_List.removeAssocU;

var removeAssoc = Garter_List.removeAssoc;

var setAssocU = Garter_List.setAssocU;

var setAssoc = Garter_List.setAssoc;

var sortU = Garter_List.sortU;

var sort = Garter_List.sort;

var isEmpty = Garter_List.isEmpty;

var takeExn = Garter_List.takeExn;

var dropExn = Garter_List.dropExn;

var splitAtExn = Garter_List.splitAtExn;

var reduce1U = Garter_List.reduce1U;

var reduce1 = Garter_List.reduce1;

var append = Garter_List.concat;

export {
  length ,
  size ,
  head ,
  headExn ,
  tail ,
  tailExn ,
  add ,
  get ,
  getExn ,
  make ,
  makeByU ,
  makeBy ,
  shuffle ,
  drop ,
  take ,
  splitAt ,
  concat ,
  concatMany ,
  reverseConcat ,
  flatten ,
  mapU ,
  map ,
  zip ,
  zipByU ,
  zipBy ,
  mapWithIndexU ,
  mapWithIndex ,
  fromArray ,
  toArray ,
  reverse ,
  mapReverseU ,
  mapReverse ,
  forEachU ,
  forEach ,
  forEachWithIndexU ,
  forEachWithIndex ,
  reduceU ,
  reduce ,
  reduceWithIndexU ,
  reduceWithIndex ,
  reduceReverseU ,
  reduceReverse ,
  mapReverse2U ,
  mapReverse2 ,
  forEach2U ,
  forEach2 ,
  reduce2U ,
  reduce2 ,
  reduceReverse2U ,
  reduceReverse2 ,
  everyU ,
  every ,
  someU ,
  some ,
  every2U ,
  every2 ,
  some2U ,
  some2 ,
  cmpByLength ,
  cmpU ,
  cmp ,
  eqU ,
  eq ,
  hasU ,
  has ,
  getByU ,
  getBy ,
  keepU ,
  keep ,
  filter ,
  keepWithIndexU ,
  keepWithIndex ,
  filterWithIndex ,
  keepMapU ,
  keepMap ,
  partitionU ,
  partition ,
  unzip ,
  getAssocU ,
  getAssoc ,
  hasAssocU ,
  hasAssoc ,
  removeAssocU ,
  removeAssoc ,
  setAssocU ,
  setAssoc ,
  sortU ,
  sort ,
  isEmpty ,
  takeExn ,
  dropExn ,
  splitAtExn ,
  reduce1U ,
  reduce1 ,
  append ,
  last ,
  singleton ,
  flatMap ,
  listToOption ,
  foldLeft ,
  combinationIf2 ,
  combination2 ,
  unfold ,
}
/* No side effect */
