// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/List.js";
import * as TableclothList from "./Tablecloth/TableclothList.mjs";
import * as Stdlib__List_Ext from "./Stdlib__List_Ext.mjs";

let length = List.length;

let size = List.size;

let head = List.head;

let headExn = List.headExn;

let tail = List.tail;

let tailExn = List.tailExn;

let add = List.add;

let get = List.get;

let getExn = List.getExn;

let make = List.make;

let fromInitializer = List.fromInitializer;

let toShuffled = List.toShuffled;

let splitAt = List.splitAt;

let concat = List.concat;

let concatMany = List.concatMany;

let reverseConcat = List.reverseConcat;

let flat = List.flat;

let map = List.map;

let zip = List.zip;

let zipBy = List.zipBy;

let mapWithIndex = List.mapWithIndex;

let fromArray = List.fromArray;

let toArray = List.toArray;

let reverse = List.reverse;

let mapReverse = List.mapReverse;

let forEach = List.forEach;

let forEachWithIndex = List.forEachWithIndex;

let reduce = List.reduce;

let reduceWithIndex = List.reduceWithIndex;

let reduceReverse = List.reduceReverse;

let mapReverse2 = List.mapReverse2;

let forEach2 = List.forEach2;

let reduce2 = List.reduce2;

let reduceReverse2 = List.reduceReverse2;

let every = List.every;

let some = List.some;

let every2 = List.every2;

let some2 = List.some2;

let compareLength = List.compareLength;

let compare = List.compare;

let equal = List.equal;

let has = List.has;

let filter = List.filter;

let filterWithIndex = List.filterWithIndex;

let filterMap = List.filterMap;

let partition = List.partition;

let unzip = List.unzip;

let getAssoc = List.getAssoc;

let hasAssoc = List.hasAssoc;

let removeAssoc = List.removeAssoc;

let setAssoc = List.setAssoc;

let sort = List.sort;

let empty = TableclothList.empty;

let singleton = TableclothList.singleton;

let repeat = TableclothList.repeat;

let range = TableclothList.range;

let initialize = TableclothList.initialize;

let cons = TableclothList.cons;

let take = TableclothList.take;

let takeWhile = TableclothList.takeWhile;

let drop = TableclothList.drop;

let dropWhile = TableclothList.dropWhile;

let initial = TableclothList.initial;

let last = TableclothList.last;

let getAt = TableclothList.getAt;

let insertAt = TableclothList.insertAt;

let updateAt = TableclothList.updateAt;

let removeAt = TableclothList.removeAt;

let sortBy = TableclothList.sortBy;

let isEmpty = TableclothList.isEmpty;

let any = TableclothList.any;

let all = TableclothList.all;

let count = TableclothList.count;

let uniqueBy = TableclothList.uniqueBy;

let find = TableclothList.find;

let findIndex = TableclothList.findIndex;

let includes = TableclothList.includes;

let minimumBy = TableclothList.minimumBy;

let maximumBy = TableclothList.maximumBy;

let minimum = TableclothList.minimum;

let maximum = TableclothList.maximum;

let extent = TableclothList.extent;

let sum = TableclothList.sum;

let flatMap = TableclothList.flatMap;

let fold = TableclothList.fold;

let foldRight = TableclothList.foldRight;

let append = TableclothList.append;

let map2 = TableclothList.map2;

let map3 = TableclothList.map3;

let splitWhen = TableclothList.splitWhen;

let intersperse = TableclothList.intersperse;

let chunksOf = TableclothList.chunksOf;

let sliding = TableclothList.sliding;

let groupWhile = TableclothList.groupWhile;

let join = TableclothList.join;

let groupBy = TableclothList.groupBy;

let L = Stdlib__List_Ext.L;

let listToOption = Stdlib__List_Ext.listToOption;

let foldLeft = Stdlib__List_Ext.foldLeft;

let transpose = Stdlib__List_Ext.transpose;

let zipWith = Stdlib__List_Ext.zipWith;

let combinationIf2 = Stdlib__List_Ext.combinationIf2;

let combination2 = Stdlib__List_Ext.combination2;

let unfold = Stdlib__List_Ext.unfold;

export {
  length,
  size,
  head,
  headExn,
  tail,
  tailExn,
  add,
  get,
  getExn,
  make,
  fromInitializer,
  toShuffled,
  splitAt,
  concat,
  concatMany,
  reverseConcat,
  flat,
  map,
  zip,
  zipBy,
  mapWithIndex,
  fromArray,
  toArray,
  reverse,
  mapReverse,
  forEach,
  forEachWithIndex,
  reduce,
  reduceWithIndex,
  reduceReverse,
  mapReverse2,
  forEach2,
  reduce2,
  reduceReverse2,
  every,
  some,
  every2,
  some2,
  compareLength,
  compare,
  equal,
  has,
  filter,
  filterWithIndex,
  filterMap,
  partition,
  unzip,
  getAssoc,
  hasAssoc,
  removeAssoc,
  setAssoc,
  sort,
  empty,
  singleton,
  repeat,
  range,
  initialize,
  cons,
  take,
  takeWhile,
  drop,
  dropWhile,
  initial,
  last,
  getAt,
  insertAt,
  updateAt,
  removeAt,
  sortBy,
  isEmpty,
  any,
  all,
  count,
  uniqueBy,
  find,
  findIndex,
  includes,
  minimumBy,
  maximumBy,
  minimum,
  maximum,
  extent,
  sum,
  flatMap,
  fold,
  foldRight,
  append,
  map2,
  map3,
  splitWhen,
  intersperse,
  chunksOf,
  sliding,
  groupWhile,
  join,
  groupBy,
  L,
  listToOption,
  foldLeft,
  transpose,
  zipWith,
  combinationIf2,
  combination2,
  unfold,
}
/* TableclothList Not a pure module */
