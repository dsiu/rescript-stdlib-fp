// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Core__List from "@rescript/core/src/Core__List.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function last(a) {
  return Core__List.getExn(a, Core__List.length(a) - 1 | 0);
}

function singleton(__x) {
  return Core__List.make(1, __x);
}

function flatMap(xs, f) {
  return Core__List.reduce(Core__List.map(xs, f), /* [] */0, Core__List.concat);
}

function listToOption(l) {
  if (l) {
    return Caml_option.some(l.hd);
  }
  
}

function foldLeft(xs, f) {
  var init = Core__List.getExn(xs, 0);
  var rest = Core__List.tailExn(xs);
  return Core__List.reduce(rest, init, f);
}

function combinationIf2(a, b, f) {
  return Core__List.reduce(a, /* [] */0, (function (acc, x) {
                return Core__List.concat(acc, Core__List.reduce(b, /* [] */0, (function (acc, y) {
                                  var r = Curry._2(f, x, y);
                                  if (r !== undefined) {
                                    return Core__List.concat(acc, {
                                                hd: Caml_option.valFromOption(r),
                                                tl: /* [] */0
                                              });
                                  } else {
                                    return acc;
                                  }
                                })));
              }));
}

function combination2(a, b, f) {
  return combinationIf2(a, b, (function (x, y) {
                return Caml_option.some(Curry._2(f, x, y));
              }));
}

function unfold(p, g, b) {
  if (Curry._1(p, b)) {
    return /* [] */0;
  }
  var match = Curry._1(g, b);
  return {
          hd: match[0],
          tl: unfold(p, g, match[1])
        };
}

var L;

var append = Core__List.concat;

export {
  L ,
  append ,
  last ,
  singleton ,
  flatMap ,
  listToOption ,
  foldLeft ,
  combinationIf2 ,
  combination2 ,
  unfold ,
}
/* No side effect */
