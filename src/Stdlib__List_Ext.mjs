// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Core__List from "@rescript/core/src/Core__List.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as TableclothList from "./Tablecloth/TableclothList.mjs";

function listToOption(l) {
  if (l) {
    return Caml_option.some(l.hd);
  }
  
}

function foldLeft(xs, f) {
  var init = Core__List.getExn(xs, 0);
  var rest = Core__List.tailExn(xs);
  return Core__List.reduce(rest, init, f);
}

function transpose(_a) {
  while(true) {
    var a = _a;
    if (!a) {
      return /* [] */0;
    }
    var match = a.hd;
    if (match) {
      var match$1 = Core__List.unzip(Core__List.map(a.tl, (function (y) {
                  return [
                          Core__List.headExn(y),
                          Core__List.tailExn(y)
                        ];
                })));
      return {
              hd: {
                hd: match.hd,
                tl: match$1[0]
              },
              tl: transpose({
                    hd: match.tl,
                    tl: match$1[1]
                  })
            };
    }
    _a = a.tl;
    continue ;
  };
}

function combinationIf2(a, b, f) {
  return Core__List.reduce(a, /* [] */0, (function (acc, x) {
                return Core__List.concat(acc, Core__List.reduce(b, /* [] */0, (function (acc, y) {
                                  var r = Curry._2(f, x, y);
                                  if (r !== undefined) {
                                    return Core__List.concat(acc, {
                                                hd: Caml_option.valFromOption(r),
                                                tl: /* [] */0
                                              });
                                  } else {
                                    return acc;
                                  }
                                })));
              }));
}

function combination2(a, b, f) {
  return combinationIf2(a, b, (function (x, y) {
                return Caml_option.some(Curry._2(f, x, y));
              }));
}

function unfold(p, g, b) {
  if (Curry._1(p, b)) {
    return /* [] */0;
  }
  var match = Curry._1(g, b);
  return {
          hd: match[0],
          tl: unfold(p, g, match[1])
        };
}

var L;

var zipWith = TableclothList.map2;

export {
  L ,
  listToOption ,
  foldLeft ,
  transpose ,
  zipWith ,
  combinationIf2 ,
  combination2 ,
  unfold ,
}
/* TableclothList Not a pure module */
