// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "rescript/lib/es6/Array.js";
import * as TableclothArray from "./Tablecloth/TableclothArray.mjs";
import * as Stdlib__Array_Ext from "./Stdlib__Array_Ext.mjs";

let make = $$Array.make;

let fromInitializer = $$Array.fromInitializer;

let compare = $$Array.compare;

let indexOfOpt = $$Array.indexOfOpt;

let lastIndexOfOpt = $$Array.lastIndexOfOpt;

let reduce = $$Array.reduce;

let reduceWithIndex = $$Array.reduceWithIndex;

let reduceRight = $$Array.reduceRight;

let reduceRightWithIndex = $$Array.reduceRightWithIndex;

let findIndexOpt = $$Array.findIndexOpt;

let keepSome = $$Array.keepSome;

let toShuffled = $$Array.toShuffled;

let shuffle = $$Array.shuffle;

let findMap = $$Array.findMap;

let last = $$Array.last;

let repeat = TableclothArray.repeat;

let range = TableclothArray.range;

let initialize = TableclothArray.initialize;

let clone = TableclothArray.clone;

let getUnsafe = TableclothArray.getUnsafe;

let setUnsafe = TableclothArray.setUnsafe;

let first = TableclothArray.first;

let swap = TableclothArray.swap;

let isEmpty = TableclothArray.isEmpty;

let any = TableclothArray.any;

let all = TableclothArray.all;

let count = TableclothArray.count;

let find = TableclothArray.find;

let findIndex = TableclothArray.findIndex;

let includes = TableclothArray.includes;

let minimum = TableclothArray.minimum;

let maximum = TableclothArray.maximum;

let extent = TableclothArray.extent;

let sum = TableclothArray.sum;

let filterMap = TableclothArray.filterMap;

let fold = TableclothArray.fold;

let foldRight = TableclothArray.foldRight;

let flatten = TableclothArray.flatten;

let zip = TableclothArray.zip;

let map2 = TableclothArray.map2;

let map3 = TableclothArray.map3;

let partition = TableclothArray.partition;

let splitAt = TableclothArray.splitAt;

let splitWhen = TableclothArray.splitWhen;

let unzip = TableclothArray.unzip;

let values = TableclothArray.values;

let intersperse = TableclothArray.intersperse;

let chunksOf = TableclothArray.chunksOf;

let sliding = TableclothArray.sliding;

let groupBy = TableclothArray.groupBy;

let toIndexedList = TableclothArray.toIndexedList;

let equal = TableclothArray.equal;

let append = Stdlib__Array_Ext.append;

let headUnsafe = Stdlib__Array_Ext.headUnsafe;

let lastUnsafe = Stdlib__Array_Ext.lastUnsafe;

let tail = Stdlib__Array_Ext.tail;

let init = Stdlib__Array_Ext.init;

let uncons = Stdlib__Array_Ext.uncons;

let singleton = Stdlib__Array_Ext.singleton;

let makeBy = Stdlib__Array_Ext.makeBy;

let take = Stdlib__Array_Ext.take;

let takeExactly = Stdlib__Array_Ext.takeExactly;

let takeWhile = Stdlib__Array_Ext.takeWhile;

let drop = Stdlib__Array_Ext.drop;

let dropExactly = Stdlib__Array_Ext.dropExactly;

let dropWhile = Stdlib__Array_Ext.dropWhile;

let tails = Stdlib__Array_Ext.tails;

let uniqBy = Stdlib__Array_Ext.uniqBy;

let uniq = Stdlib__Array_Ext.uniq;

let scanl = Stdlib__Array_Ext.scanl;

let arrayToOption = Stdlib__Array_Ext.arrayToOption;

let foldl1 = Stdlib__Array_Ext.foldl1;

let foldr1 = Stdlib__Array_Ext.foldr1;

let unfoldr = Stdlib__Array_Ext.unfoldr;

let $$return = Stdlib__Array_Ext.$$return;

let transpose = Stdlib__Array_Ext.transpose;

let zipWith = Stdlib__Array_Ext.zipWith;

let liftM2 = Stdlib__Array_Ext.liftM2;

let combinationIf2 = Stdlib__Array_Ext.combinationIf2;

let combination2 = Stdlib__Array_Ext.combination2;

let combinationIf3 = Stdlib__Array_Ext.combinationIf3;

let combinationArray3 = Stdlib__Array_Ext.combinationArray3;

let combinationIf4 = Stdlib__Array_Ext.combinationIf4;

let combination4 = Stdlib__Array_Ext.combination4;

export {
  make,
  fromInitializer,
  compare,
  indexOfOpt,
  lastIndexOfOpt,
  reduce,
  reduceWithIndex,
  reduceRight,
  reduceRightWithIndex,
  findIndexOpt,
  keepSome,
  toShuffled,
  shuffle,
  findMap,
  last,
  repeat,
  range,
  initialize,
  clone,
  getUnsafe,
  setUnsafe,
  first,
  swap,
  isEmpty,
  any,
  all,
  count,
  find,
  findIndex,
  includes,
  minimum,
  maximum,
  extent,
  sum,
  filterMap,
  fold,
  foldRight,
  flatten,
  zip,
  map2,
  map3,
  partition,
  splitAt,
  splitWhen,
  unzip,
  values,
  intersperse,
  chunksOf,
  sliding,
  groupBy,
  toIndexedList,
  equal,
  append,
  headUnsafe,
  lastUnsafe,
  tail,
  init,
  uncons,
  singleton,
  makeBy,
  take,
  takeExactly,
  takeWhile,
  drop,
  dropExactly,
  dropWhile,
  tails,
  uniqBy,
  uniq,
  scanl,
  arrayToOption,
  foldl1,
  foldr1,
  unfoldr,
  $$return,
  transpose,
  zipWith,
  liftM2,
  combinationIf2,
  combination2,
  combinationIf3,
  combinationArray3,
  combinationIf4,
  combination4,
}
/* TableclothArray Not a pure module */
